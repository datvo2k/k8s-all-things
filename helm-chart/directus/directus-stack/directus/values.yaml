# Default values for directus.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: directus/directus
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          backend:
            serviceName: chart-example.local
            servicePort: 80
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

extraEnvVars:
  # An array to add extra environment variables
  # E.g.
  # extraEnvVars:
  #  - name: STORAGE_LOCATIONS
  #    value: "s3"
  - name: ADMIN_EMAIL
    value: "admin@admin.com"
  - name: ADMIN_PASSWORD
    value: "d1r3ctu5"
  - name: CACHE_ENABLED
    value: "redis.local"
  - name: CACHE_STORE
    value: "redis"
  - name: DB_CLIENT
    value: "mysql"
  - name: DB_DATABASE
    value: "directus"
  - name: DB_HOST
    value: "mysql.local"
  - name: DB_PORT
    value: "3306"
  - name: DB_USER
    value: "directus"
  - name: DB_PASSWORD
    value: "directus"
  - name: KEY
    value: "08e94891-eb01-4ec8-929c-84da769e59df"
  - name: SECRET
    value: "577ff8ab-12ef-44dc-baec-098240acbd4e"
  - name: TELEMETRY
    value: "false"

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 200m
    memory: 256Mi

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

mariadb:
  enabled: false
  ## Global Docker image parameters
  ## Please, note that this will override the image parameters, including dependencies, configured to use the global value
  ## Current available global Docker image parameters: imageRegistry and imagePullSecrets
  ##
  # global:
  #   imageRegistry: myRegistryName
  #   imagePullSecrets:
  #     - myRegistryKeySecretNamec
  #   storageClass: myStorageClass

  ## Bitnami MariaDB image
  ## ref: https://hub.docker.com/r/bitnami/mariadb/tags/
  ##
  image:
    registry: docker.io
    repository: bitnami/mariadb
    tag: 11.2.2-debian-11-r1
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets (secrets must be manually created in the namespace)
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## Example:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
    ## Set to true if you would like to see extra information on logs
    ## It turns BASH and/or NAMI debugging in the image
    ##
    debug: false

  ## String to partially override mariadb.fullname template (will maintain the release name)
  ##
  # nameOverride:

  ## String to fully override mariadb.fullname template
  ##
  # fullnameOverride:

  ## Cluster domain
  ##
  clusterDomain: mariadb.local

  ## Common annotations to add to all MariaDB resources (sub-charts are not considered). Evaluated as a template
  ##
  commonAnnotations: {}

  ## Common labels to add to all MariaDB resources (sub-charts are not considered). Evaluated as a template
  ##
  commonLabels: {}

  ## Use an alternate scheduler, e.g. "stork".
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  # schedulerName:

  ## MariaDB architecture. Allowed values: standalone or replication
  ##
  architecture: standalone

  ## MariaDB Authentication parameters
  ##
  auth:
    ## MariaDB root password
    ## ref: https://github.com/bitnami/bitnami-docker-mariadb#setting-the-root-password-on-first-run
    ##
    rootPassword: directus
    ## MariaDB custom user and database
    ## ref: https://github.com/bitnami/bitnami-docker-mariadb/blob/master/README.md#creating-a-database-on-first-run
    ## ref: https://github.com/bitnami/bitnami-docker-mariadb/blob/master/README.md#creating-a-database-user-on-first-run
    ##
    database: directus
    username: directus
    password: directus
    ## MariaDB replication user and password
    ## ref: https://github.com/bitnami/bitnami-docker-mariadb#setting-up-a-replication-cluster
    ##
    replicationUser: replicator
    replicationPassword: ""
    ## Existing secret with MariaDB credentials
    ## NOTE: When it's set the previous parameters are ignored.
    ##
    # existingSecret: name-of-existing-secret
    ## Force users to specify required passwords
    ##
    forcePassword: false
    ## Mount credentials as files instead of using an environment variable
    ##
    usePasswordFiles: false
    ## Use custom secret files other than chart provided when usePasswordFiles is set to "true"
    ## Example:
    ## customPasswordFiles:
    ##   root: /vault/secrets/mariadb-root
    ##   user: /vault/secrets/mariadb-user
    ##   replicator: /vault/secrets/mariadb-replicator
    ##
    customPasswordFiles: {}

  ## initdb scripts
  ## Specify dictionary of scripts to be run at first boot
  ## Example:
  ## initdbScripts:
  ##   my_init_script.sh: |
  ##      #!/bin/bash
  ##      echo "Do something."
  ##
  initdbScripts: {}

  ## Existing ConfigMap with custom init scripts
  ##
  # initdbScriptsConfigMap:

  ## Mariadb Primary parameters
  ##
  primary:
    ## Command and args for running the container (set to default if not set). Use array form
    ##
    command: []
    args: []

    ## Deployment pod host aliases
    ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
    ##
    hostAliases: []

    ## Configure MariaDB Primary with a custom my.cnf file
    ## ref: https://mysql.com/kb/en/mysql/configuring-mysql-with-mycnf/#example-of-configuration-file
    ##
    configuration: |-
      [mysqld]
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mariadb
      plugin_dir=/opt/bitnami/mariadb/plugin
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      tmpdir=/opt/bitnami/mariadb/tmp
      max_allowed_packet=16M
      bind-address=0.0.0.0
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
      log-error=/opt/bitnami/mariadb/logs/mysqld.log
      character-set-server=UTF8
      collation-server=utf8_general_ci

      [client]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      default-character-set=UTF8
      plugin_dir=/opt/bitnami/mariadb/plugin

      [manager]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid

    ## Name of existing ConfigMap with MariaDB Primary configuration.
    ## NOTE: When it's set the 'configuration' parameter is ignored
    ##
    # existingConfiguration:

    ## updateStrategy for Mariadb Primary statefulset
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
    ##
    updateStrategy: RollingUpdate

    ## Partition update strategy for Mariadb Primary statefulset
    ## https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#partitions
    ##
    # rollingUpdatePartition:

    ## Mariadb Primary pod annotations
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    ##
    podAnnotations: {}

    ## Mariadb Primary pod affinity preset
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
    ## Allowed values: soft, hard
    ##
    podAffinityPreset: ""

    ## Mariadb Primary pod anti-affinity preset
    ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
    ## Allowed values: soft, hard
    ##
    podAntiAffinityPreset: soft

    ## Mariadb Primary node affinity preset
    ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
    ## Allowed values: soft, hard
    ##
    nodeAffinityPreset:
      ## Node affinity type
      ## Allowed values: soft, hard
      ##
      type: ""
      ## Node label key to match
      ## E.g.
      ## key: "kubernetes.io/e2e-az-name"
      ##
      key: ""
      ## Node label values to match
      ## E.g.
      ## values:
      ##   - e2e-az1
      ##   - e2e-az2
      ##
      values: []

    ## Affinity for MariaDB primary pods assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
    ##
    affinity: {}

    ## Node labels for MariaDB primary pods assignment
    ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
    ##
    nodeSelector: {}

    ## Tolerations for MariaDB primary pods assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    ##
    tolerations: []

    ## Priority class for MariaDB primary pods assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
    ##
    priorityClassName: ""

    ## MariaDB primary Pod security context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    ##
    podSecurityContext:
      enabled: true
      fsGroup: 1001

    ## MariaDB primary container security context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
    ##
    containerSecurityContext:
      enabled: true
      runAsUser: 1001

    ## MariaDB primary container's resource requests and limits
    ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
    ##
    resources:
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      limits: {}
      #   memory: 256Mi
      #   cpu: 100m
      requests: {}
      #   memory: 256Mi
      #   cpu: 100m

    ## MariaDB primary container's liveness and readiness probes
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
    ##
    livenessProbe:
      enabled: true
      initialDelaySeconds: 120
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 3
      successThreshold: 1
    readinessProbe:
      enabled: true
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 3
      successThreshold: 1

    ## MariaDB primary custom liveness probe
    ##
    customLivenessProbe: {}

    ## MariaDB primary custom rediness probe
    ##
    customReadinessProbe: {}

    ## MariaDB primary additional command line flags
    ## Can be used to specify command line flags, for example:
    ## E.g.
    ## extraFlags: "--max-connect-errors=1000 --max_connections=155"
    ##
    extraFlags: ""

    ## An array to add extra environment variables on MariaDB primary containers
    ## E.g.
    ## extraEnvVars:
    ##  - name: TZ
    ##    value: "Europe/Paris"
    ##
    extraEnvVars: []

    ## ConfigMap with extra env vars for MariaDB primary containers:
    ##
    extraEnvVarsCM: ""

    ## Secret with extra env vars for MariaDB primary containers:
    ##
    extraEnvVarsSecret: ""

    ## Enable persistence using Persistent Volume Claims
    ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    persistence:
      ## If true, use a Persistent Volume Claim, If false, use emptyDir
      ##
      enabled: true
      ## Name of existing PVC to hold MariaDB Primary data
      ## NOTE: When it's set the rest of persistence parameters are ignored
      ##
      # existingClaim:
      ## Subdirectory of the volume to mount
      # subPath:
      ## Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      # storageClass: "-"
      ## Persistent Volume Claim annotations
      ##
      annotations: {}
      ## Persistent Volume Access Mode
      ##
      accessModes:
        - ReadWriteOnce
      ## Persistent Volume size
      ##
      size: 8Gi
      ## selector can be used to match an existing PersistentVolume
      ## selector:
      ##   matchLabels:
      ##     app: my-app
      ##
      selector: {}

    ## Extra volumes to add to the MariaDB Primary pod(s)
    ##
    extraVolumes: []

    ## Extra volume mounts to add to the MariaDB Primary container(s)
    ##
    extraVolumeMounts: []

    ## Extra init containers to add to the MariaDB Primary pod(s)
    ##
    initContainers: []

    ## Extra sidecar containers to add to the MariaDB Primary pod(s)
    ##
    sidecars: []

    ## MariaDB Primary Service parameters
    ##
    service:
      ## Service type
      ##
      type: ClusterIP
      ## Service port
      ##
      port: 3306
      ## Specify the nodePort value for the LoadBalancer and NodePort service types.
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
      ##
      nodePort: ""
      ## Service clusterIP
      ##
      # clusterIP: None
      clusterIP: ""
      ## Set the LoadBalancer service type to internal only.
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
      ##
      loadBalancerIP: ""
      ## Load Balancer sources
      ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
      ## E.g.
      ## loadBalancerSourceRanges:
      ##   - 10.10.10.0/24
      ##
      loadBalancerSourceRanges: []
      ## Provide any additional annotations which may be required
      ##
      annotations: {}

    ## MariaDB primary Pod Disruption Budget configuration
    ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
    ##
    pdb:
      enabled: false
      ## Min number of pods that must still be available after the eviction
      ##
      minAvailable: 1
      ## Max number of pods that can be unavailable after the eviction
      ##
      # maxUnavailable: 1

  ## Mariadb Secondary parameters
  ##
  secondary:
    ## Number of Mariadb Secondary replicas to deploy
    ##
    replicaCount: 1

    ## Command and args for running the container (set to default if not set). Use array form
    ##
    command: []
    args: []

    ## Deployment pod host aliases
    ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
    ##
    hostAliases: []

    ## Configure MariaDB Secondary with a custom my.cnf file
    ## ref: https://mysql.com/kb/en/mysql/configuring-mysql-with-mycnf/#example-of-configuration-file
    ##
    configuration: |-
      [mysqld]
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mariadb
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      tmpdir=/opt/bitnami/mariadb/tmp
      max_allowed_packet=16M
      bind-address=0.0.0.0
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
      log-error=/opt/bitnami/mariadb/logs/mysqld.log
      character-set-server=UTF8
      collation-server=utf8_general_ci

      [client]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      default-character-set=UTF8

      [manager]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid

    ## Name of existing ConfigMap with MariaDB Secondary configuration.
    ## NOTE: When it's set the 'configuration' parameter is ignored
    ##
    # existingConfiguration:

    ## updateStrategy for Mariadb Secondary statefulset
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
    ##
    updateStrategy: RollingUpdate

    ## Partition update strategy for Mariadb Secondary statefulset
    ## https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#partitions
    ##
    # rollingUpdatePartition:

    ## Mariadb Secondary pod annotations
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    ##
    podAnnotations: {}

    ## Mariadb Secondary pod affinity preset
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
    ## Allowed values: soft, hard
    ##
    podAffinityPreset: ""

    ## Mariadb Secondary pod anti-affinity preset
    ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
    ## Allowed values: soft, hard
    ##
    podAntiAffinityPreset: soft

    ## Mariadb Secondary node affinity preset
    ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
    ## Allowed values: soft, hard
    ##
    nodeAffinityPreset:
      ## Node affinity type
      ## Allowed values: soft, hard
      ##
      type: ""
      ## Node label key to match
      ## E.g.
      ## key: "kubernetes.io/e2e-az-name"
      ##
      key: ""
      ## Node label values to match
      ## E.g.
      ## values:
      ##   - e2e-az1
      ##   - e2e-az2
      ##
      values: []

    ## Affinity for MariaDB secondary pods assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
    ##
    affinity: {}

    ## Node labels for MariaDB secondary pods assignment
    ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
    ##
    nodeSelector: {}

    ## Tolerations for MariaDB secondary pods assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    ##
    tolerations: []

    ## Priority class for MariaDB secondary pods assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
    ##
    priorityClassName: ""

    ## MariaDB secondary Pod security context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    ##
    podSecurityContext:
      enabled: true
      fsGroup: 1001

    ## MariaDB secondary container security context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
    ##
    containerSecurityContext:
      enabled: true
      runAsUser: 1001

    ## MariaDB secondary container's resource requests and limits
    ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
    ##
    resources:
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      limits: {}
      #   memory: 256Mi
      #   cpu: 100m
      requests: {}
      #   memory: 256Mi
      #   cpu: 100m

    ## MariaDB secondary container's liveness and readiness probes
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
    ##
    livenessProbe:
      enabled: true
      initialDelaySeconds: 120
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 3
      successThreshold: 1
    readinessProbe:
      enabled: true
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 3
      successThreshold: 1

    ## MariaDB secondary custom liveness probe
    ##
    customLivenessProbe: {}

    ## MariaDB secondary custom rediness probe
    ##
    customReadinessProbe: {}

    ## MariaDB secondary additional command line flags
    ## Can be used to specify command line flags, for example:
    ## E.g.
    ## extraFlags: "--max-connect-errors=1000 --max_connections=155"
    ##
    extraFlags: ""

    ## An array to add extra environment variables on MariaDB secondary containers
    ## E.g.
    ## extraEnvVars:
    ##  - name: TZ
    ##    value: "Europe/Paris"
    ##
    extraEnvVars: []

    ## ConfigMap with extra env vars for MariaDB secondary containers:
    ##
    extraEnvVarsCM: ""

    ## Secret with extra env vars for MariaDB secondary containers:
    ##
    extraEnvVarsSecret: ""

    ## Enable persistence using Persistent Volume Claims
    ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    persistence:
      ## If true, use a Persistent Volume Claim, If false, use emptyDir
      ##
      enabled: true
      ## Subdirectory of the volume to mount
      # subPath:
      ## Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      # storageClass: "-"
      ## Persistent Volume Claim annotations
      ##
      annotations: {}
      ## Persistent Volume Access Mode
      ##
      accessModes:
        - ReadWriteOnce
      ## Persistent Volume size
      ##
      size: 8Gi
      ## selector can be used to match an existing PersistentVolume
      ## selector:
      ##   matchLabels:
      ##     app: my-app
      ##
      selector: {}

    ## Extra volumes to add to the MariaDB Secondary pod(s)
    ##
    extraVolumes: []

    ## Extra volume mounts to add to the MariaDB Secondary container(s)
    ##
    extraVolumeMounts: []

    ## Extra init containers to add to the MariaDB Secondary pod(s)
    ##
    initContainers: []

    ## Extra sidecar containers to add to the MariaDB Secondary pod(s)
    ##
    sidecars: []

    ## MariaDB Secondary Service parameters
    ##
    service:
      ## Service type
      ##
      type: ClusterIP
      ## Service port
      ##
      port: 3306
      ## Specify the nodePort value for the LoadBalancer and NodePort service types.
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
      ##
      nodePort: ""
      ## Service clusterIP
      ##
      # clusterIP: None
      clusterIP: ""
      ## Set the LoadBalancer service type to internal only.
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
      ##
      loadBalancerIP: ""
      ## Load Balancer sources
      ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
      ## E.g.
      ## loadBalancerSourceRanges:
      ##   - 10.10.10.0/24
      ##
      loadBalancerSourceRanges: []
      ## Provide any additional annotations which may be required
      ##
      annotations: {}

    ## MariaDB secondary Pod Disruption Budget configuration
    ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
    ##
    pdb:
      enabled: false
      ## Min number of pods that must still be available after the eviction
      ##
      minAvailable: 1
      ## Max number of pods that can be unavailable after the eviction
      ##
      # maxUnavailable: 1

  ## MariaDB pods ServiceAccount
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
  ##
  serviceAccount:
    ## Specifies whether a ServiceAccount should be created
    ##
    create: true
    ## The name of the ServiceAccount to use.
    ## If not set and create is true, a name is generated using the mariadb.fullname template
    ##
    # name:
    ## Annotations to add to the service account (evaluated as a template)
    ##
    annotations: {}

  ## Role Based Access
  ## ref: https://kubernetes.io/docs/admin/authorization/rbac/
  ##
  rbac:
    ## Specifies whether RBAC rules should be created
    ##
    create: false

  ## Init containers parameters:
  ## volumePermissions: Change the owner and group of the persistent volume mountpoint to runAsUser:fsGroup values from the securityContext section.
  ##
  volumePermissions:
    enabled: false
    image:
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 10-debian-10-r91
      pullPolicy: Always
      ## Optionally specify an array of imagePullSecrets.
      ## Secrets must be manually created in the namespace.
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ##
      # pullSecrets:
      #   - myRegistryKeySecretName
    resources: {}

  ## Mysqld Prometheus exporter parameters
  ##
  metrics:
    enabled: false
    image:
      registry: docker.io
      repository: bitnami/mysqld-exporter
      tag: 0.12.1-debian-10-r448
      pullPolicy: IfNotPresent
      ## Optionally specify an array of imagePullSecrets.
      ## Secrets must be manually created in the namespace.
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ##
      # pullSecrets:
      #   - myRegistryKeySecretName

    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9104"

    ## Extra args to be passed to mysqld_exporter
    ## ref: https://github.com/prometheus/mysqld_exporter/
    ## E.g.
    ## - --collect.auto_increment.columns
    ## - --collect.binlog_size
    ## - --collect.engine_innodb_status
    ## - --collect.engine_tokudb_status
    ## - --collect.global_status
    ## - --collect.global_variables
    ## - --collect.info_schema.clientstats
    ## - --collect.info_schema.innodb_metrics
    ## - --collect.info_schema.innodb_tablespaces
    ## - --collect.info_schema.innodb_cmp
    ## - --collect.info_schema.innodb_cmpmem
    ## - --collect.info_schema.processlist
    ## - --collect.info_schema.processlist.min_time
    ## - --collect.info_schema.query_response_time
    ## - --collect.info_schema.tables
    ## - --collect.info_schema.tables.databases
    ## - --collect.info_schema.tablestats
    ## - --collect.info_schema.userstats
    ## - --collect.perf_schema.eventsstatements
    ## - --collect.perf_schema.eventsstatements.digest_text_limit
    ## - --collect.perf_schema.eventsstatements.limit
    ## - --collect.perf_schema.eventsstatements.timelimit
    ## - --collect.perf_schema.eventswaits
    ## - --collect.perf_schema.file_events
    ## - --collect.perf_schema.file_instances
    ## - --collect.perf_schema.indexiowaits
    ## - --collect.perf_schema.tableiowaits
    ## - --collect.perf_schema.tablelocks
    ## - --collect.perf_schema.replication_group_member_stats
    ## - --collect.slave_status
    ## - --collect.slave_hosts
    ## - --collect.heartbeat
    ## - --collect.heartbeat.database
    ## - --collect.heartbeat.table
    ##
    extraArgs:
      primary: []
      secondary: []

    ## Mysqld Prometheus exporter resource requests and limits
    ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
    ##
    resources:
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      limits: {}
      #   memory: 256Mi
      #   cpu: 100m
      requests: {}
      #   memory: 256Mi
      #   cpu: 100m

    ## Mysqld Prometheus exporter liveness and readiness probes
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
    ##
    livenessProbe:
      enabled: true
      initialDelaySeconds: 120
      periodSeconds: 10
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 3
    readinessProbe:
      enabled: true
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 3

    ## Prometheus Service Monitor
    ## ref: https://github.com/coreos/prometheus-operator
    ##
    serviceMonitor:
      ## If the operator is installed in your cluster, set to true to create a Service Monitor Entry
      ##
      enabled: false
      ## Specify the namespace in which the serviceMonitor resource will be created
      ##
      # namespace: ""
      ## Specify the interval at which metrics should be scraped
      ##
      interval: 30s
      ## Specify the timeout after which the scrape is ended
      ##
      # scrapeTimeout: 30s
      ## Specify Metric Relabellings to add to the scrape endpoint
      ##
      # relabellings:
      ## Specify honorLabels parameter to add the scrape endpoint
      ##
      honorLabels: false
      ## Specify the release for ServiceMonitor. Sometimes it should be custom for prometheus operator to work
      ##
      # release: ""
      ## Used to pass Labels that are used by the Prometheus installed in your cluster to select Service Monitors to work with
      ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
      ##
      additionalLabels: {}

  ## Array with extra yaml to deploy with the chart. Evaluated as a template
  ##
  extraDeploy: []

redis:
  enabled: true
  ## @section Global parameters
  ## Global Docker image parameters
  ## Please, note that this will override the image parameters, including dependencies, configured to use the global value
  ## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass

  ## @param global.imageRegistry Global Docker image registry
  ## @param global.imagePullSecrets Global Docker registry secret names as an array
  ## @param global.storageClass Global StorageClass for Persistent Volume(s)
  ## @param global.redis.password Global Redis(TM) password (overrides `auth.password`)
  ##
  global:
    imageRegistry:
    ## E.g.
    ## imagePullSecrets:
    ##   - myRegistryKeySecretName
    ##
    imagePullSecrets: []
    storageClass:
    redis:
      password:

  ## @section Common parameters

  ## @param kubeVersion Override Kubernetes version
  ##
  kubeVersion:
  ## @param nameOverride String to partially override common.names.fullname
  ##
  nameOverride:
  ## @param fullnameOverride String to fully override common.names.fullname
  ##
  fullnameOverride:
  ## @param commonLabels Labels to add to all deployed objects
  ##
  commonLabels: {}
  ## @param commonAnnotations Annotations to add to all deployed objects
  ##
  commonAnnotations: {}
  ## @param clusterDomain Kubernetes cluster domain name
  ##
  clusterDomain: redis.local
  ## @param extraDeploy Array of extra objects to deploy with the release
  ##
  extraDeploy: []

  ## @section Redis(TM) Image parameters

  ## Bitnami Redis(TM) image
  ## ref: https://hub.docker.com/r/bitnami/redis/tags/
  ## @param image.registry Redis(TM) image registry
  ## @param image.repository Redis(TM) image repository
  ## @param image.tag Redis(TM) image tag (immutable tags are recommended)
  ## @param image.pullPolicy Redis(TM) image pull policy
  ## @param image.pullSecrets Redis(TM) image pull secrets
  ## @param image.debug Enable image debug mode
  ##
  image:
    registry: docker.io
    repository: bitnami/redis
    tag: 6.2.14-debian-11-r2
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
    ## Enable debug mode
    ##
    debug: false

  ## @section Redis(TM) common configuration parameters
  ## https://github.com/bitnami/bitnami-docker-redis#configuration

  ## @param architecture Redis(TM) architecture. Allowed values: `standalone` or `replication`
  ##
  architecture: replication
  ## Redis(TM) Authentication parameters
  ## ref: https://github.com/bitnami/bitnami-docker-redis#setting-the-server-password-on-first-run
  ##
  auth:
    ## @param auth.enabled Enable password authentication
    ##
    enabled: true
    ## @param auth.sentinel Enable password authentication on sentinels too
    ##
    sentinel: true
    ## @param auth.password Redis(TM) password
    ## Defaults to a random 10-character alphanumeric string if not set
    ##
    password: ""
    ## @param auth.existingSecret The name of an existing secret with Redis(TM) credentials
    ## NOTE: When it's set, the previous `auth.password` parameter is ignored
    ##
    existingSecret:
    ## @param auth.existingSecretPasswordKey Password key to be retrieved from existing secret
    ## NOTE: ignored unless `auth.existingSecret` parameter is set
    ##
    existingSecretPasswordKey:
    ## @param auth.usePasswordFiles Mount credentials as files instead of using an environment variable
    ##
    usePasswordFiles: false
  ## @skip commonConfiguration
  ## ref: https://redis.io/topics/config
  ##
  commonConfiguration: |-
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
  ## @param existingConfigmap The name of an existing ConfigMap with your custom configuration for Redis(TM) nodes
  ##
  existingConfigmap:

  ## @section Redis(TM) master configuration parameters

  master:
    ## @param master.configuration Configuration for Redis(TM) master nodes
    ## ref: https://redis.io/topics/config
    ##
    configuration:
    ## @param master.disableCommands [array] Array with Redis(TM) commands to disable on master nodes
    ## Commands will be completely disabled by renaming each to an empty string.
    ## ref: https://redis.io/topics/security#disabling-of-specific-commands
    ##
    disableCommands:
      - FLUSHDB
      - FLUSHALL
    ## @param master.command Override default container command (useful when using custom images)
    ##
    command: []
    ## @param master.args Override default container args (useful when using custom images)
    ##
    args: []
    ## @param master.preExecCmds Additional commands to run prior to starting Redis(TM) master
    ##
    preExecCmds: []
    ## @param master.extraFlags Array with additional command line flags for Redis(TM) master
    ## e.g:
    ## extraFlags:
    ##  - "--maxmemory-policy volatile-ttl"
    ##  - "--repl-backlog-size 1024mb"
    ##
    extraFlags: []
    ## @param master.extraEnvVars Array with extra environment variables to add to Redis(TM) master nodes
    ## e.g:
    ## extraEnvVars:
    ##   - name: FOO
    ##     value: "bar"
    ##
    extraEnvVars: []
    ## @param master.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for Redis(TM) master nodes
    ##
    extraEnvVarsCM:
    ## @param master.extraEnvVarsSecret Name of existing Secret containing extra env vars for Redis(TM) master nodes
    ##
    extraEnvVarsSecret:
    ## @param master.containerPort Container port to open on Redis(TM) master nodes
    ##
    containerPort: 6379
    ## Configure extra options for Redis(TM) containers' liveness and readiness probes
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
    ## @param master.livenessProbe.enabled Enable livenessProbe on Redis(TM) master nodes
    ## @param master.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
    ## @param master.livenessProbe.periodSeconds Period seconds for livenessProbe
    ## @param master.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
    ## @param master.livenessProbe.failureThreshold Failure threshold for livenessProbe
    ## @param master.livenessProbe.successThreshold Success threshold for livenessProbe
    ##
    livenessProbe:
      enabled: true
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    ## @param master.readinessProbe.enabled Enable readinessProbe on Redis(TM) master nodes
    ## @param master.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
    ## @param master.readinessProbe.periodSeconds Period seconds for readinessProbe
    ## @param master.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
    ## @param master.readinessProbe.failureThreshold Failure threshold for readinessProbe
    ## @param master.readinessProbe.successThreshold Success threshold for readinessProbe
    ##
    readinessProbe:
      enabled: true
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 5
    ## @param master.customLivenessProbe Custom livenessProbe that overrides the default one
    ##
    customLivenessProbe: {}
    ## @param master.customReadinessProbe Custom readinessProbe that overrides the default one
    ##
    customReadinessProbe: {}
    ## Redis(TM) master resource requests and limits
    ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
    ## @param master.resources.limits The resources limits for the Redis(TM) master containers
    ## @param master.resources.requests The requested resources for the Redis(TM) master containers
    ##
    resources:
      limits: {}
      requests: {}
    ## Configure Pods Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    ## @param master.podSecurityContext.enabled Enabled Redis(TM) master pods' Security Context
    ## @param master.podSecurityContext.fsGroup Set Redis(TM) master pod's Security Context fsGroup
    ##
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    ## Configure Container Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    ## @param master.containerSecurityContext.enabled Enabled Redis(TM) master containers' Security Context
    ## @param master.containerSecurityContext.runAsUser Set Redis(TM) master containers' Security Context runAsUser
    ##
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    ## @param master.schedulerName Alternate scheduler for Redis(TM) master pods
    ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
    ##
    schedulerName:
    ## @param master.updateStrategy.type Redis(TM) master statefulset strategy type
    ## @skip master.updateStrategy.rollingUpdate
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
    ##
    updateStrategy:
      ## StrategyType
      ## Can be set to RollingUpdate or OnDelete
      ##
      type: RollingUpdate
      rollingUpdate: {}
    ## @param master.priorityClassName Redis(TM) master pods' priorityClassName
    ##
    priorityClassName: ""
    ## @param master.hostAliases Redis(TM) master pods host aliases
    ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
    ##
    hostAliases: []
    ## @param master.podLabels Extra labels for Redis(TM) master pods
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    ##
    podLabels: {}
    ## @param master.podAnnotations Annotations for Redis(TM) master pods
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    ##
    podAnnotations: {}
    ## @param master.shareProcessNamespace Share a single process namespace between all of the containers in Redis(TM) master pods
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/share-process-namespace/
    ##
    shareProcessNamespace: false
    ## @param master.podAffinityPreset Pod affinity preset. Ignored if `master.affinity` is set. Allowed values: `soft` or `hard`
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
    ##
    podAffinityPreset: ""
    ## @param master.podAntiAffinityPreset Pod anti-affinity preset. Ignored if `master.affinity` is set. Allowed values: `soft` or `hard`
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
    ##
    podAntiAffinityPreset: soft
    ## Node master.affinity preset
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
    ##
    nodeAffinityPreset:
      ## @param master.nodeAffinityPreset.type Node affinity preset type. Ignored if `master.affinity` is set. Allowed values: `soft` or `hard`
      ##
      type: ""
      ## @param master.nodeAffinityPreset.key Node label key to match. Ignored if `master.affinity` is set
      ##
      key: ""
      ## @param master.nodeAffinityPreset.values Node label values to match. Ignored if `master.affinity` is set
      ## E.g.
      ## values:
      ##   - e2e-az1
      ##   - e2e-az2
      ##
      values: []
    ## @param master.affinity Affinity for Redis(TM) master pods assignment
    ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    ## NOTE: `master.podAffinityPreset`, `master.podAntiAffinityPreset`, and `master.nodeAffinityPreset` will be ignored when it's set
    ##
    affinity: {}
    ## @param master.nodeSelector Node labels for Redis(TM) master pods assignment
    ## ref: https://kubernetes.io/docs/user-guide/node-selection/
    ##
    nodeSelector: {}
    ## @param master.tolerations Tolerations for Redis(TM) master pods assignment
    ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    ##
    tolerations: []
    ## @param master.spreadConstraints Spread Constraints for Redis(TM) master pod assignment
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
    ## E.g.
    ## spreadConstraints:
    ##   - maxSkew: 1
    ##     topologyKey: node
    ##     whenUnsatisfiable: DoNotSchedule
    ##
    spreadConstraints: {}
    ## @param master.lifecycleHooks for the Redis(TM) master container(s) to automate configuration before or after startup
    ##
    lifecycleHooks: {}
    ## @param master.extraVolumes Optionally specify extra list of additional volumes for the Redis(TM) master pod(s)
    ##
    extraVolumes: []
    ## @param master.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the Redis(TM) master container(s)
    ##
    extraVolumeMounts: []
    ## @param master.sidecars Add additional sidecar containers to the Redis(TM) master pod(s)
    ## e.g:
    ## sidecars:
    ##   - name: your-image-name
    ##     image: your-image
    ##     imagePullPolicy: Always
    ##     ports:
    ##       - name: portname
    ##         containerPort: 1234
    ##
    sidecars: {}
    ## @param master.initContainers Add additional init containers to the Redis(TM) master pod(s)
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
    ## e.g:
    ## initContainers:
    ##  - name: your-image-name
    ##    image: your-image
    ##    imagePullPolicy: Always
    ##    command: ['sh', '-c', 'echo "hello world"']
    ##
    initContainers: {}
    ## Persistence parameters
    ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    persistence:
      ## @param master.persistence.enabled Enable persistence on Redis(TM) master nodes using Persistent Volume Claims
      ##
      enabled: true
      ## @param master.persistence.path The path the volume will be mounted at on Redis(TM) master containers
      ## NOTE: Useful when using different Redis(TM) images
      ##
      path: /data
      ## @param master.persistence.subPath The subdirectory of the volume to mount on Redis(TM) master containers
      ## NOTE: Useful in dev environments
      ##
      subPath: ""
      ## @param master.persistence.storageClass Persistent Volume storage class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is set, choosing the default provisioner
      ##
      storageClass:
      ## @param master.persistence.accessModes [array] Persistent Volume access modes
      ##
      accessModes:
        - ReadWriteOnce
      ## @param master.persistence.size Persistent Volume size
      ##
      size: 8Gi
      ## @param master.persistence.annotations Additional custom annotations for the PVC
      ##
      annotations: {}
      ## @param master.persistence.selector Additional labels to match for the PVC
      ## e.g:
      ## selector:
      ##   matchLabels:
      ##     app: my-app
      ##
      selector: {}
      ## @param master.persistence.existingClaim Use a existing PVC which must be created manually before bound
      ## NOTE: requires master.persistence.enabled: true
      ##
      existingClaim:
    ## Redis(TM) master service parameters
    ##
    service:
      ## @param master.service.type Redis(TM) master service type
      ##
      type: ClusterIP
      ## @param master.service.port Redis(TM) master service port
      ##
      port: 6379
      ## @param master.service.nodePort Node port for Redis(TM) master
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
      ## NOTE: choose port between <30000-32767>
      ##
      nodePort:
      ## @param master.service.externalTrafficPolicy Redis(TM) master service external traffic policy
      ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
      ##
      externalTrafficPolicy: Cluster
      ## @param master.service.clusterIP Redis(TM) master service Cluster IP
      ##
      clusterIP:
      ## @param master.service.loadBalancerIP Redis(TM) master service Load Balancer IP
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
      ##
      loadBalancerIP:
      ## @param master.service.loadBalancerSourceRanges Redis(TM) master service Load Balancer sources
      ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
      ## e.g.
      ## loadBalancerSourceRanges:
      ##   - 10.10.10.0/24
      ##
      loadBalancerSourceRanges: []
      ## @param master.service.annotations Additional custom annotations for Redis(TM) master service
      ##
      annotations: {}
    ## @param master.terminationGracePeriodSeconds Integer setting the termination grace period for the redis-master pods
    ##
    terminationGracePeriodSeconds: 30

  ## @section Redis(TM) replicas configuration parameters

  replica:
    ## @param replica.replicaCount Number of Redis(TM) replicas to deploy
    ##
    replicaCount: 3
    ## @param replica.configuration Configuration for Redis(TM) replicas nodes
    ## ref: https://redis.io/topics/config
    ##
    configuration:
    ## @param replica.disableCommands [array] Array with Redis(TM) commands to disable on replicas nodes
    ## Commands will be completely disabled by renaming each to an empty string.
    ## ref: https://redis.io/topics/security#disabling-of-specific-commands
    ##
    disableCommands:
      - FLUSHDB
      - FLUSHALL
    ## @param replica.command Override default container command (useful when using custom images)
    ##
    command: []
    ## @param replica.args Override default container args (useful when using custom images)
    ##
    args: []
    ## @param replica.preExecCmds Additional commands to run prior to starting Redis(TM) replicas
    ##
    preExecCmds: []
    ## @param replica.extraFlags Array with additional command line flags for Redis(TM) replicas
    ## e.g:
    ## extraFlags:
    ##  - "--maxmemory-policy volatile-ttl"
    ##  - "--repl-backlog-size 1024mb"
    ##
    extraFlags: []
    ## @param replica.extraEnvVars Array with extra environment variables to add to Redis(TM) replicas nodes
    ## e.g:
    ## extraEnvVars:
    ##   - name: FOO
    ##     value: "bar"
    ##
    extraEnvVars: []
    ## @param replica.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for Redis(TM) replicas nodes
    ##
    extraEnvVarsCM:
    ## @param replica.extraEnvVarsSecret Name of existing Secret containing extra env vars for Redis(TM) replicas nodes
    ##
    extraEnvVarsSecret:
    ## @param replica.containerPort Container port to open on Redis(TM) replicas nodes
    ##
    containerPort: 6379
    ## Configure extra options for Redis(TM) containers' liveness and readiness probes
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
    ## @param replica.livenessProbe.enabled Enable livenessProbe on Redis(TM) replicas nodes
    ## @param replica.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
    ## @param replica.livenessProbe.periodSeconds Period seconds for livenessProbe
    ## @param replica.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
    ## @param replica.livenessProbe.failureThreshold Failure threshold for livenessProbe
    ## @param replica.livenessProbe.successThreshold Success threshold for livenessProbe
    ##
    livenessProbe:
      enabled: true
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    ## @param replica.readinessProbe.enabled Enable readinessProbe on Redis(TM) replicas nodes
    ## @param replica.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
    ## @param replica.readinessProbe.periodSeconds Period seconds for readinessProbe
    ## @param replica.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
    ## @param replica.readinessProbe.failureThreshold Failure threshold for readinessProbe
    ## @param replica.readinessProbe.successThreshold Success threshold for readinessProbe
    ##
    readinessProbe:
      enabled: true
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 5
    ## @param replica.customLivenessProbe Custom livenessProbe that overrides the default one
    ##
    customLivenessProbe: {}
    ## @param replica.customReadinessProbe Custom readinessProbe that overrides the default one
    ##
    customReadinessProbe: {}
    ## Redis(TM) replicas resource requests and limits
    ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
    ## @param replica.resources.limits The resources limits for the Redis(TM) replicas containers
    ## @param replica.resources.requests The requested resources for the Redis(TM) replicas containers
    ##
    resources:
      limits: {}
      requests: {}
    ## Configure Pods Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    ## @param replica.podSecurityContext.enabled Enabled Redis(TM) replicas pods' Security Context
    ## @param replica.podSecurityContext.fsGroup Set Redis(TM) replicas pod's Security Context fsGroup
    ##
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    ## Configure Container Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    ## @param replica.containerSecurityContext.enabled Enabled Redis(TM) replicas containers' Security Context
    ## @param replica.containerSecurityContext.runAsUser Set Redis(TM) replicas containers' Security Context runAsUser
    ##
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    ## @param replica.schedulerName Alternate scheduler for Redis(TM) replicas pods
    ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
    ##
    schedulerName:
    ## @param replica.updateStrategy.type Redis(TM) replicas statefulset strategy type
    ## @skip replica.updateStrategy.rollingUpdate
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
    ##
    updateStrategy:
      ## StrategyType
      ## Can be set to RollingUpdate or OnDelete
      ##
      type: RollingUpdate
      rollingUpdate: {}
    ## @param replica.priorityClassName Redis(TM) replicas pods' priorityClassName
    ##
    priorityClassName: ""
    ## @param replica.hostAliases Redis(TM) replicas pods host aliases
    ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
    ##
    hostAliases: []
    ## @param replica.podLabels Extra labels for Redis(TM) replicas pods
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    ##
    podLabels: {}
    ## @param replica.podAnnotations Annotations for Redis(TM) replicas pods
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    ##
    podAnnotations: {}
    ## @param replica.shareProcessNamespace Share a single process namespace between all of the containers in Redis(TM) replicas pods
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/share-process-namespace/
    ##
    shareProcessNamespace: false
    ## @param replica.podAffinityPreset Pod affinity preset. Ignored if `replica.affinity` is set. Allowed values: `soft` or `hard`
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
    ##
    podAffinityPreset: ""
    ## @param replica.podAntiAffinityPreset Pod anti-affinity preset. Ignored if `replica.affinity` is set. Allowed values: `soft` or `hard`
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
    ##
    podAntiAffinityPreset: soft
    ## Node affinity preset
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
    ##
    nodeAffinityPreset:
      ## @param replica.nodeAffinityPreset.type Node affinity preset type. Ignored if `replica.affinity` is set. Allowed values: `soft` or `hard`
      ##
      type: ""
      ## @param replica.nodeAffinityPreset.key Node label key to match. Ignored if `replica.affinity` is set
      ##
      key: ""
      ## @param replica.nodeAffinityPreset.values Node label values to match. Ignored if `replica.affinity` is set
      ## E.g.
      ## values:
      ##   - e2e-az1
      ##   - e2e-az2
      ##
      values: []
    ## @param replica.affinity Affinity for Redis(TM) replicas pods assignment
    ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    ## NOTE: `replica.podAffinityPreset`, `replica.podAntiAffinityPreset`, and `replica.nodeAffinityPreset` will be ignored when it's set
    ##
    affinity: {}
    ## @param replica.nodeSelector Node labels for Redis(TM) replicas pods assignment
    ## ref: https://kubernetes.io/docs/user-guide/node-selection/
    ##
    nodeSelector: {}
    ## @param replica.tolerations Tolerations for Redis(TM) replicas pods assignment
    ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    ##
    tolerations: []
    ## @param replica.spreadConstraints Spread Constraints for Redis(TM) replicas pod assignment
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
    ## E.g.
    ## spreadConstraints:
    ##   - maxSkew: 1
    ##     topologyKey: node
    ##     whenUnsatisfiable: DoNotSchedule
    ##
    spreadConstraints: {}
    ## @param replica.lifecycleHooks for the Redis(TM) replica container(s) to automate configuration before or after startup
    ##
    lifecycleHooks: {}
    ## @param replica.extraVolumes Optionally specify extra list of additional volumes for the Redis(TM) replicas pod(s)
    ##
    extraVolumes: []
    ## @param replica.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the Redis(TM) replicas container(s)
    ##
    extraVolumeMounts: []
    ## @param replica.sidecars Add additional sidecar containers to the Redis(TM) replicas pod(s)
    ## e.g:
    ## sidecars:
    ##   - name: your-image-name
    ##     image: your-image
    ##     imagePullPolicy: Always
    ##     ports:
    ##       - name: portname
    ##         containerPort: 1234
    ##
    sidecars: {}
    ## @param replica.initContainers Add additional init containers to the Redis(TM) replicas pod(s)
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
    ## e.g:
    ## initContainers:
    ##  - name: your-image-name
    ##    image: your-image
    ##    imagePullPolicy: Always
    ##    command: ['sh', '-c', 'echo "hello world"']
    ##
    initContainers: {}
    ## Persistence Parameters
    ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    persistence:
      ## @param replica.persistence.enabled Enable persistence on Redis(TM) replicas nodes using Persistent Volume Claims
      ##
      enabled: true
      ## @param replica.persistence.path The path the volume will be mounted at on Redis(TM) replicas containers
      ## NOTE: Useful when using different Redis(TM) images
      ##
      path: /data
      ## @param replica.persistence.subPath The subdirectory of the volume to mount on Redis(TM) replicas containers
      ## NOTE: Useful in dev environments
      ##
      subPath: ""
      ## @param replica.persistence.storageClass Persistent Volume storage class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is set, choosing the default provisioner
      ##
      storageClass:
      ## @param replica.persistence.accessModes [array] Persistent Volume access modes
      ##
      accessModes:
        - ReadWriteOnce
      ## @param replica.persistence.size Persistent Volume size
      ##
      size: 8Gi
      ## @param replica.persistence.annotations Additional custom annotations for the PVC
      ##
      annotations: {}
      ## @param replica.persistence.selector Additional labels to match for the PVC
      ## e.g:
      ## selector:
      ##   matchLabels:
      ##     app: my-app
      ##
      selector: {}
    ## Redis(TM) replicas service parameters
    ##
    service:
      ## @param replica.service.type Redis(TM) replicas service type
      ##
      type: ClusterIP
      ## @param replica.service.port Redis(TM) replicas service port
      ##
      port: 6379
      ## @param replica.service.nodePort Node port for Redis(TM) replicas
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
      ## NOTE: choose port between <30000-32767>
      ##
      nodePort:
      ## @param replica.service.externalTrafficPolicy Redis(TM) replicas service external traffic policy
      ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
      ##
      externalTrafficPolicy: Cluster
      ## @param replica.service.clusterIP Redis(TM) replicas service Cluster IP
      ##
      clusterIP:
      ## @param replica.service.loadBalancerIP Redis(TM) replicas service Load Balancer IP
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
      ##
      loadBalancerIP:
      ## @param replica.service.loadBalancerSourceRanges Redis(TM) replicas service Load Balancer sources
      ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
      ## e.g.
      ## loadBalancerSourceRanges:
      ##   - 10.10.10.0/24
      ##
      loadBalancerSourceRanges: []
      ## @param replica.service.annotations Additional custom annotations for Redis(TM) replicas service
      ##
      annotations: {}
    ## @param replica.terminationGracePeriodSeconds Integer setting the termination grace period for the redis-replicas pods
    ##
    terminationGracePeriodSeconds: 30

  ## @section Redis(TM) Sentinel configuration parameters

  sentinel:
    ## @param sentinel.enabled Use Redis(TM) Sentinel on Redis(TM) pods.
    ## IMPORTANT: this will disable the master and replicas services and
    ## create a single Redis(TM) service exposing both the Redis and Sentinel ports
    ##
    enabled: false
    ## Bitnami Redis(TM) Sentinel image version
    ## ref: https://hub.docker.com/r/bitnami/redis-sentinel/tags/
    ## @param sentinel.image.registry Redis(TM) Sentinel image registry
    ## @param sentinel.image.repository Redis(TM) Sentinel image repository
    ## @param sentinel.image.tag Redis(TM) Sentinel image tag (immutable tags are recommended)
    ## @param sentinel.image.pullPolicy Redis(TM) Sentinel image pull policy
    ## @param sentinel.image.pullSecrets Redis(TM) Sentinel image pull secrets
    ## @param sentinel.image.debug Enable image debug mode
    ##
    image:
      registry: docker.io
      repository: bitnami/redis-sentinel
      tag: 6.2.3-debian-10-r20
      ## Specify a imagePullPolicy
      ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
      ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
      ##
      pullPolicy: IfNotPresent
      ## Optionally specify an array of imagePullSecrets.
      ## Secrets must be manually created in the namespace.
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ## e.g:
      ## pullSecrets:
      ##   - myRegistryKeySecretName
      ##
      pullSecrets: []
      ## Enable debug mode
      ##
      debug: false
    ## @param sentinel.masterSet Master set name
    ##
    masterSet: mymaster
    ## @param sentinel.quorum Sentinel Quorum
    ##
    quorum: 2
    ## Sentinel timing restrictions
    ## @param sentinel.downAfterMilliseconds Timeout for detecting a Redis(TM) node is down
    ## @param sentinel.failoverTimeout Timeout for performing a election failover
    ## @param sentinel.cleanDelaySeconds Delay seconds when cleaning nodes IPs
    #
    downAfterMilliseconds: 60000
    failoverTimeout: 18000
    cleanDelaySeconds: 5
    ## @param sentinel.parallelSyncs Number of replicas that can be reconfigured in parallel to use the new master after a failover
    ##
    parallelSyncs: 1
    ## @param sentinel.staticID Enable static Sentinel IDs for each replica
    ## If disabled each sentinel will generate a random id at startup
    ## If enabled, each replicas will have a constant ID on each start-up
    ##
    staticID: false
    ## @param sentinel.configuration Configuration for Redis(TM) Sentinel nodes
    ## ref: https://redis.io/topics/sentinel
    ##
    configuration:
    ## @param sentinel.command Override default container command (useful when using custom images)
    ##
    command: []
    ## @param sentinel.args Override default container args (useful when using custom images)
    ##
    args: []
    ## @param sentinel.preExecCmds Additional commands to run prior to starting Redis(TM) Sentinel
    ##
    preExecCmds: []
    ## @param sentinel.containerPort Container port to open on Redis(TM) Sentinel nodes
    ##
    containerPort: 26379
    ## Configure extra options for Redis(TM) containers' liveness and readiness probes
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
    ## @param sentinel.livenessProbe.enabled Enable livenessProbe on Redis(TM) Sentinel nodes
    ## @param sentinel.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
    ## @param sentinel.livenessProbe.periodSeconds Period seconds for livenessProbe
    ## @param sentinel.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
    ## @param sentinel.livenessProbe.failureThreshold Failure threshold for livenessProbe
    ## @param sentinel.livenessProbe.successThreshold Success threshold for livenessProbe
    ##
    livenessProbe:
      enabled: true
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    ## @param sentinel.readinessProbe.enabled Enable readinessProbe on Redis(TM) Sentinel nodes
    ## @param sentinel.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
    ## @param sentinel.readinessProbe.periodSeconds Period seconds for readinessProbe
    ## @param sentinel.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
    ## @param sentinel.readinessProbe.failureThreshold Failure threshold for readinessProbe
    ## @param sentinel.readinessProbe.successThreshold Success threshold for readinessProbe
    ##
    readinessProbe:
      enabled: true
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 5
    ## @param sentinel.customLivenessProbe Custom livenessProbe that overrides the default one
    ##
    customLivenessProbe: {}
    ## @param sentinel.customReadinessProbe Custom readinessProbe that overrides the default one
    ##
    customReadinessProbe: {}
    ## Redis(TM) Sentinel resource requests and limits
    ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
    ## @param sentinel.resources.limits The resources limits for the Redis(TM) Sentinel containers
    ## @param sentinel.resources.requests The requested resources for the Redis(TM) Sentinel containers
    ##
    resources:
      limits: {}
      requests: {}
    ## Configure Container Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    ## @param sentinel.containerSecurityContext.enabled Enabled Redis(TM) Sentinel containers' Security Context
    ## @param sentinel.containerSecurityContext.runAsUser Set Redis(TM) Sentinel containers' Security Context runAsUser
    ##
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    ## @param sentinel.lifecycleHooks for the Redis(TM) sentinel container(s) to automate configuration before or after startup
    ##
    lifecycleHooks: {}
    ## @param sentinel.extraVolumes Optionally specify extra list of additional volumes for the Redis(TM) Sentinel
    ##
    extraVolumes: []
    ## @param sentinel.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the Redis(TM) Sentinel container(s)
    ##
    extraVolumeMounts: []
    ## Redis(TM) Sentinel service parameters
    ##
    service:
      ## @param sentinel.service.type Redis(TM) Sentinel service type
      ##
      type: ClusterIP
      ## @param sentinel.service.port Redis(TM) service port for Redis(TM)
      ##
      port: 6379
      ## @param sentinel.service.sentinelPort Redis(TM) service port for Sentinel
      ##
      sentinelPort: 26379
      ## @param sentinel.service.nodePorts.redis Node port for Redis(TM)
      ## @param sentinel.service.nodePorts.sentinel Node port for Sentinel
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
      ## NOTE: choose port between <30000-32767>
      ##
      nodePorts:
        redis:
        sentinel:
      ## @param sentinel.service.externalTrafficPolicy Redis(TM) Sentinel service external traffic policy
      ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
      ##
      externalTrafficPolicy: Cluster
      ## @param sentinel.service.clusterIP Redis(TM) Sentinel service Cluster IP
      ##
      clusterIP:
      ## @param sentinel.service.loadBalancerIP Redis(TM) Sentinel service Load Balancer IP
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
      ##
      loadBalancerIP:
      ## @param sentinel.service.loadBalancerSourceRanges Redis(TM) Sentinel service Load Balancer sources
      ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
      ## e.g.
      ## loadBalancerSourceRanges:
      ##   - 10.10.10.0/24
      ##
      loadBalancerSourceRanges: []
      ## @param sentinel.service.annotations Additional custom annotations for Redis(TM) Sentinel service
      ##
      annotations: {}
    ## @param sentinel.terminationGracePeriodSeconds Integer setting the termination grace period for the redis-node pods
    ##
    terminationGracePeriodSeconds: 30

  ## @section Other Parameters

  ## Network Policy configuration
  ## ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
  ##
  networkPolicy:
    ## @param networkPolicy.enabled Enable creation of NetworkPolicy resources
    ##
    enabled: false
    ## @param networkPolicy.allowExternal Don't require client label for connections
    ## When set to false, only pods with the correct client label will have network access to the ports
    ## Redis(TM) is listening on. When true, Redis(TM) will accept connections from any source
    ## (with the correct destination port).
    ##
    allowExternal: true
    ## @param networkPolicy.extraIngress Add extra ingress rules to the NetworkPolicy
    ## e.g:
    ## extraIngress:
    ##   - ports:
    ##       - port: 1234
    ##     from:
    ##       - podSelector:
    ##           - matchLabels:
    ##               - role: frontend
    ##       - podSelector:
    ##           - matchExpressions:
    ##               - key: role
    ##                 operator: In
    ##                 values:
    ##                   - frontend
    ##
    extraIngress: []
    ## @param networkPolicy.extraEgress Add extra ingress rules to the NetworkPolicy
    ## e.g:
    ## extraEgress:
    ##   - ports:
    ##       - port: 1234
    ##     to:
    ##       - podSelector:
    ##           - matchLabels:
    ##               - role: frontend
    ##       - podSelector:
    ##           - matchExpressions:
    ##               - key: role
    ##                 operator: In
    ##                 values:
    ##                   - frontend
    ##
    extraEgress: []
    ## @param networkPolicy.ingressNSMatchLabels Labels to match to allow traffic from other namespaces
    ## @param networkPolicy.ingressNSPodMatchLabels Pod labels to match to allow traffic from other namespaces
    ##
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  ## PodSecurityPolicy configuration
  ## ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/
  ##
  podSecurityPolicy:
    ## @param podSecurityPolicy.create Specifies whether a PodSecurityPolicy should be created (set `podSecurityPolicy.enabled` to `true` to enable it)
    ##
    create: false
    ## @param podSecurityPolicy.enable Enable PodSecurityPolicy
    ##
    enabled: false
  ## RBAC configuration
  ##
  rbac:
    ## @param rbac.create Specifies whether RBAC resources should be created
    ##
    create: false
    ## @param rbac.rules Custom RBAC rules to set
    ## e.g:
    ## rules:
    ##   - apiGroups:
    ##       - ""
    ##     resources:
    ##       - pods
    ##     verbs:
    ##       - get
    ##       - list
    ##
    rules: []
  ## ServiceAccount configuration
  ##
  serviceAccount:
    ## @param serviceAccount.create Specifies whether a ServiceAccount should be created
    ##
    create: true
    ## @param serviceAccount.name The name of the ServiceAccount to use.
    ## If not set and create is true, a name is generated using the common.names.fullname template
    ##
    name: ""
    ## @param serviceAccount.annotations Additional custom annotations for the ServiceAccount
    ##
    annotations: {}
  ## Redis(TM) Pod Disruption Budget configuration
  ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
  ##
  pdb:
    ## @param pdb.create Specifies whether a ServiceAccount should be created
    ##
    create: false
    ## @param pdb.minAvailable Min number of pods that must still be available after the eviction
    ##
    minAvailable: 1
    ## @param pdb.maxUnavailable Max number of pods that can be unavailable after the eviction
    ##
    maxUnavailable:
  ## TLS configuration
  ##
  tls:
    ## @param tls.enabled Enable TLS traffic
    ##
    enabled: false
    ## @param tls.authClients Require clients to authenticate
    ##
    authClients: true
    ## @param tls.certificatesSecret Then name of the existing secret that contains the TLS certificates
    ##
    certificatesSecret:
    ## @param tls.certFilename Certificate filename
    ##
    certFilename:
    ## @param tls.certKeyFilename Certificate Key filename
    ##
    certKeyFilename:
    ## @param tls.certCAFilename CA Certificate filename
    ##
    certCAFilename:
    ## @param tls.dhParamsFilename File containing DH params (in order to support DH based ciphers)
    ##
    dhParamsFilename:

  ## @section Metrics Parameters

  metrics:
    ## @param metrics.enabled Start a sidecar prometheus exporter to expose Redis(TM) metrics
    ##
    enabled: false
    ## Bitnami Redis(TM) Exporter image
    ## ref: https://hub.docker.com/r/bitnami/redis-exporter/tags/
    ## @param metrics.image.registry Redis(TM) Exporter image registry
    ## @param metrics.image.repository Redis(TM) Exporter image repository
    ## @param metrics.image.tag Redis(TM) Redis(TM) Exporter image tag (immutable tags are recommended)
    ## @param metrics.image.pullPolicy Redis(TM) Exporter image pull policy
    ## @param metrics.image.pullSecrets Redis(TM) Exporter image pull secrets
    ##
    image:
      registry: docker.io
      repository: bitnami/redis-exporter
      tag: 1.23.1-debian-10-r19
      pullPolicy: IfNotPresent
      ## Optionally specify an array of imagePullSecrets.
      ## Secrets must be manually created in the namespace.
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ## e.g:
      ## pullSecrets:
      ##   - myRegistryKeySecretName
      ##
      pullSecrets: []
    ## @param metrics.redisTargetHost A way to specify an alternative Redis(TM) hostname
    ## Useful for certificate CN/SAN matching
    ##
    redisTargetHost: "localhost"
    ## @param metrics.extraArgs Extra arguments for Redis(TM) exporter, for example:
    ## e.g.:
    ## extraArgs:
    ##   check-keys: myKey,myOtherKey
    ##
    extraArgs: {}
    ## Configure Container Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    ## @param metrics.containerSecurityContext.enabled Enabled Redis(TM) exporter containers' Security Context
    ## @param metrics.containerSecurityContext.runAsUser Set Redis(TM) exporter containers' Security Context runAsUser
    ##
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    ## Redis(TM) exporter resource requests and limits
    ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
    ## @param metrics.resources.limits The resources limits for the Redis(TM) exporter container
    ## @param metrics.resources.requests The requested resources for the Redis(TM) exporter container
    ##
    resources:
      limits: {}
      requests: {}
    ## @param metrics.podLabels Extra labels for Redis(TM) exporter pods
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    ##
    podLabels: {}
    ## @param metrics.podAnnotations [object] Annotations for Redis(TM) exporter pods
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    ##
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9121"
    ## Redis(TM) exporter service parameters
    ##
    service:
      ## @param metrics.service.type Redis(TM) exporter service type
      ##
      type: ClusterIP
      ## @param metrics.service.port Redis(TM) exporter service port
      ##
      port: 9121
      ## @param metrics.service.externalTrafficPolicy Redis(TM) exporter service external traffic policy
      ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
      ##
      externalTrafficPolicy: Cluster
      ## @param metrics.service.loadBalancerIP Redis(TM) exporter service Load Balancer IP
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
      ##
      loadBalancerIP: ""
      ## @param metrics.service.loadBalancerSourceRanges Redis(TM) exporter service Load Balancer sources
      ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
      ## e.g.
      ## loadBalancerSourceRanges:
      ##   - 10.10.10.0/24
      ##
      loadBalancerSourceRanges: []
      ## @param metrics.service.annotations Additional custom annotations for Redis(TM) exporter service
      ##
      annotations: {}
    ## Redis(TM) Sentinel Exporter
    ##
    sentinel:
      ## @param metrics.sentinel.enabled Start a sidecar prometheus exporter to expose Redis(TM) Sentinel metrics
      ##
      enabled: false
      ## Bitnami Redis(TM) Sentinel Exporter image
      ## ref: https://hub.docker.com/r/bitnami/redis-sentinel-exporter/tags/
      ## @param metrics.sentinel.image.registry Redis(TM) Sentinel Exporter image registry
      ## @param metrics.sentinel.image.repository Redis(TM) Sentinel Exporter image repository
      ## @param metrics.sentinel.image.tag Redis(TM) Redis(TM) Sentinel Exporter image tag (immutable tags are recommended)
      ## @param metrics.sentinel.image.pullPolicy Redis(TM) Sentinel Exporter image pull policy
      ## @param metrics.sentinel.image.pullSecrets Redis(TM) Sentinel Exporter image pull secrets
      ##
      image:
        registry: docker.io
        repository: bitnami/redis-sentinel-exporter
        tag: 1.7.1-debian-10-r148
        pullPolicy: IfNotPresent
        ## Optionally specify an array of imagePullSecrets.
        ## Secrets must be manually created in the namespace.
        ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
        ## e.g:
        ## pullSecrets:
        ##   - myRegistryKeySecretName
        ##
        pullSecrets: []
      ## @param metrics.sentinel.extraArgs Extra arguments for Redis(TM) Sentinel exporter, for example:
      ## e.g.:
      ## extraArgs:
      ##   check-keys: myKey,myOtherKey
      ##
      extraArgs: {}
      ## Configure Container Security Context
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
      ## @param metrics.sentinel.containerSecurityContext.enabled Enabled Redis(TM) Sentinel exporter containers' Security Context
      ## @param metrics.sentinel.containerSecurityContext.runAsUser Set Redis(TM) Sentinel exporter containers' Security Context runAsUser
      ##
      containerSecurityContext:
        enabled: true
        runAsUser: 1001
      ## Redis(TM) Sentinel exporter resource requests and limits
      ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
      ## @param metrics.sentinel.resources.limits The resources limits for the Redis(TM) Sentinel exporter container
      ## @param metrics.sentinel.resources.requests The requested resources for the Redis(TM) Sentinel exporter container
      ##
      resources:
        limits: {}
        requests: {}
      ## Redis(TM) Sentinel exporter service parameters
      ##
      service:
        ## @param metrics.sentinel.service.type Redis(TM) Sentinel exporter service type
        ##
        type: ClusterIP
        ## @param metrics.sentinel.service.port Redis(TM) Sentinel exporter service port
        ##
        port: 9355
        ## @param metrics.sentinel.service.externalTrafficPolicy Redis(TM) Sentinel exporter service external traffic policy
        ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
        ##
        externalTrafficPolicy: Cluster
        ## @param metrics.sentinel.service.loadBalancerIP Redis(TM) Sentinel exporter service Load Balancer IP
        ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
        ##
        loadBalancerIP: ""
        ## @param metrics.sentinel.service.loadBalancerSourceRanges Redis(TM) Sentinel exporter service Load Balancer sources
        ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
        ## e.g.
        ## loadBalancerSourceRanges:
        ##   - 10.10.10.0/24
        ##
        loadBalancerSourceRanges: []
        ## @param metrics.sentinel.service.annotations Additional custom annotations for Redis(TM) Sentinel exporter service
        ##
        annotations: {}
    ## Prometheus Service Monitor
    ## ref: https://github.com/coreos/prometheus-operator
    ##      https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
    ##
    serviceMonitor:
      ## @param metrics.serviceMonitor.enabled Create ServiceMonitor resource(s) for scraping metrics using PrometheusOperator
      ##
      enabled: false
      ## @param metrics.serviceMonitor.namespace The namespace in which the ServiceMonitor will be created
      ##
      namespace:
      ## @param metrics.serviceMonitor.interval The interval at which metrics should be scraped
      ##
      interval: 30s
      ## @param metrics.serviceMonitor.scrapeTimeout The timeout after which the scrape is ended
      ##
      scrapeTimeout:
      ## @param metrics.serviceMonitor.relabellings Metrics relabellings to add to the scrape endpoint
      ##
      relabellings: []
      ## @param metrics.serviceMonitor.honorLabels Specify honorLabels parameter to add the scrape endpoint
      ##
      honorLabels: false
      ## @param metrics.serviceMonitor.additionalLabels Additional labels that can be used so ServiceMonitor resource(s) can be discovered by Prometheus
      ##
      additionalLabels: {}
    ## Custom PrometheusRule to be defined
    ## ref: https://github.com/coreos/prometheus-operator#customresourcedefinitions
    ##
    prometheusRule:
      ## @param metrics.prometheusRule.enabled Create a custom prometheusRule Resource for scraping metrics using PrometheusOperator
      ##
      enabled: false
      ## @param metrics.prometheusRule.namespace The namespace in which the prometheusRule will be created
      ##
      namespace:
      ## @param metrics.prometheusRule.additionalLabels Additional labels for the prometheusRule
      ##
      additionalLabels: {}
      ## @param metrics.prometheusRule.rules Custom Prometheus rules
      ## e.g:
      ## rules:
      ##   - alert: RedisDown
      ##     expr: redis_up{service="{{ template "common.names.fullname" . }}-metrics"} == 0
      ##     for: 2m
      ##     labels:
      ##       severity: error
      ##     annotations:
      ##       summary: Redis(TM) instance {{ "{{ $labels.instance }}" }} down
      ##       description: Redis(TM) instance {{ "{{ $labels.instance }}" }} is down
      ##    - alert: RedisMemoryHigh
      ##      expr: >
      ##        redis_memory_used_bytes{service="{{ template "common.names.fullname" . }}-metrics"} * 100
      ##        /
      ##        redis_memory_max_bytes{service="{{ template "common.names.fullname" . }}-metrics"}
      ##        > 90
      ##      for: 2m
      ##      labels:
      ##        severity: error
      ##      annotations:
      ##        summary: Redis(TM) instance {{ "{{ $labels.instance }}" }} is using too much memory
      ##        description: |
      ##          Redis(TM) instance {{ "{{ $labels.instance }}" }} is using {{ "{{ $value }}" }}% of its available memory.
      ##    - alert: RedisKeyEviction
      ##      expr: |
      ##        increase(redis_evicted_keys_total{service="{{ template "common.names.fullname" . }}-metrics"}[5m]) > 0
      ##      for: 1s
      ##      labels:
      ##        severity: error
      ##      annotations:
      ##        summary: Redis(TM) instance {{ "{{ $labels.instance }}" }} has evicted keys
      ##        description: |
      ##          Redis(TM) instance {{ "{{ $labels.instance }}" }} has evicted {{ "{{ $value }}" }} keys in the last 5 minutes.
      ##
      rules: []

  ## @section Init Container Parameters

  ## 'volumePermissions' init container parameters
  ## Changes the owner and group of the persistent volume mount point to runAsUser:fsGroup values
  ##   based on the *podSecurityContext/*containerSecurityContext parameters
  ##
  volumePermissions:
    ## @param volumePermissions.enabled Enable init container that changes the owner/group of the PV mount point to `runAsUser:fsGroup`
    ##
    enabled: false
    ## Bitnami Shell image
    ## ref: https://hub.docker.com/r/bitnami/bitnami-shell/tags/
    ## @param volumePermissions.image.registry Bitnami Shell image registry
    ## @param volumePermissions.image.repository Bitnami Shell image repository
    ## @param volumePermissions.image.tag Bitnami Shell image tag (immutable tags are recommended)
    ## @param volumePermissions.image.pullPolicy Bitnami Shell image pull policy
    ## @param volumePermissions.image.pullSecrets Bitnami Shell image pull secrets
    ##
    image:
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 10-debian-10-r92
      pullPolicy: Always
      ## Optionally specify an array of imagePullSecrets.
      ## Secrets must be manually created in the namespace.
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ## e.g:
      ## pullSecrets:
      ##   - myRegistryKeySecretName
      ##
      pullSecrets: []
    ## Init container's resource requests and limits
    ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
    ## @param volumePermissions.resources.limits The resources limits for the init container
    ## @param volumePermissions.resources.requests The requested resources for the init container
    ##
    resources:
      limits: {}
      requests: {}
    ## Init container Container Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
    ## @param volumePermissions.containerSecurityContext.runAsUser Set init container's Security Context runAsUser
    ## NOTE: when runAsUser is set to special value "auto", init container will try to chown the
    ##   data folder to auto-determined user&group, using commands: `id -u`:`id -G | cut -d" " -f2`
    ##   "auto" is especially useful for OpenShift which has scc with dynamic user ids (and 0 is not allowed)
    ##
    containerSecurityContext:
      runAsUser: 0

  ## init-sysctl container parameters
  ## used to perform sysctl operation to modify Kernel settings (needed sometimes to avoid warnings)
  ##
  sysctl:
    ## @param sysctl.enabled Enable init container to modify Kernel settings
    ##
    enabled: false
    ## Bitnami Shell image
    ## ref: https://hub.docker.com/r/bitnami/bitnami-shell/tags/
    ## @param sysctl.image.registry Bitnami Shell image registry
    ## @param sysctl.image.repository Bitnami Shell image repository
    ## @param sysctl.image.tag Bitnami Shell image tag (immutable tags are recommended)
    ## @param sysctl.image.pullPolicy Bitnami Shell image pull policy
    ## @param sysctl.image.pullSecrets Bitnami Shell image pull secrets
    ##
    image:
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 10-debian-10-r92
      pullPolicy: Always
      ## Optionally specify an array of imagePullSecrets.
      ## Secrets must be manually created in the namespace.
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ## e.g:
      ## pullSecrets:
      ##   - myRegistryKeySecretName
      ##
      pullSecrets: []
    ## @param sysctl.command Override default init-sysctl container command (useful when using custom images)
    ##
    command: []
    ## @param sysctl.mountHostSys Mount the host `/sys` folder to `/host-sys`
    ##
    mountHostSys: false
    ## Init container's resource requests and limits
    ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
    ## @param sysctl.resources.limits The resources limits for the init container
    ## @param sysctl.resources.requests The requested resources for the init container
    ##
    resources:
      limits: {}
      requests: {}

mysql:
  enabled: true

  global:
  imageRegistry: ""
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []
  storageClass: ""

  ## @section Common parameters
  ##

  ## @param kubeVersion Force target Kubernetes version (using Helm capabilities if not set)
  ##
  kubeVersion: ""
  ## @param nameOverride String to partially override common.names.fullname template (will maintain the release name)
  ##
  nameOverride: ""
  ## @param fullnameOverride String to fully override common.names.fullname template
  ##
  fullnameOverride: ""
  ## @param namespaceOverride String to fully override common.names.namespace
  ##
  namespaceOverride: ""
  ## @param clusterDomain Cluster domain
  ##
  clusterDomain: mysql.local
  ## @param commonAnnotations Common annotations to add to all MySQL resources (sub-charts are not considered). Evaluated as a template
  ##
  commonAnnotations: {}
  ## @param commonLabels Common labels to add to all MySQL resources (sub-charts are not considered). Evaluated as a template
  ##
  commonLabels: {}
  ## @param extraDeploy Array with extra yaml to deploy with the chart. Evaluated as a template
  ##
  extraDeploy: []

  ## @param serviceBindings.enabled Create secret for service binding (Experimental)
  ## Ref: https://servicebinding.io/service-provider/
  ##
  serviceBindings:
    enabled: false

  ## Enable diagnostic mode in the deployment
  ##
  diagnosticMode:
    ## @param diagnosticMode.enabled Enable diagnostic mode (all probes will be disabled and the command will be overridden)
    ##
    enabled: false
    ## @param diagnosticMode.command Command to override all containers in the deployment
    ##
    command:
      - sleep
    ## @param diagnosticMode.args Args to override all containers in the deployment
    ##
    args:
      - infinity

  ## @section MySQL common parameters
  ##

  ## Bitnami MySQL image
  ## ref: https://hub.docker.com/r/bitnami/mysql/tags/
  ## @param image.registry [default: REGISTRY_NAME] MySQL image registry
  ## @param image.repository [default: REPOSITORY_NAME/mysql] MySQL image repository
  ## @skip image.tag MySQL image tag (immutable tags are recommended)
  ## @param image.digest MySQL image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  ## @param image.pullPolicy MySQL image pull policy
  ## @param image.pullSecrets Specify docker-registry secret names as an array
  ## @param image.debug Specify if debug logs should be enabled
  ##
  image:
    registry: docker.io
    repository: bitnami/mysql
    tag: 8.2.0-debian-11-r2
    digest: ""
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets (secrets must be manually created in the namespace)
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## Example:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
    ## Set to true if you would like to see extra information on logs
    ## It turns BASH and/or NAMI debugging in the image
    ##
    debug: false
  ## @param architecture MySQL architecture (`standalone` or `replication`)
  ##
  architecture: standalone
  ## MySQL Authentication parameters
  ##
  auth:
    ## @param auth.rootPassword Password for the `root` user. Ignored if existing secret is provided
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#setting-the-root-password-on-first-run
    ##
    rootPassword: "directus"
    ## @param auth.createDatabase Whether to create the .Values.auth.database or not
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-on-first-run
    ##
    createDatabase: true
    ## @param auth.database Name for a custom database to create
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-on-first-run
    ##
    database: "directus"
    ## @param auth.username Name for a custom user to create
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-user-on-first-run
    ##
    username: "directus"
    ## @param auth.password Password for the new user. Ignored if existing secret is provided
    ##
    password: "directus"
    ## @param auth.replicationUser MySQL replication user
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#setting-up-a-replication-cluster
    ##
    replicationUser: replicator
    ## @param auth.replicationPassword MySQL replication user password. Ignored if existing secret is provided
    ##
    replicationPassword: ""
    ## @param auth.existingSecret Use existing secret for password details. The secret has to contain the keys `mysql-root-password`, `mysql-replication-password` and `mysql-password`
    ## NOTE: When it's set the auth.rootPassword, auth.password, auth.replicationPassword are ignored.
    ##
    existingSecret: ""
    ## @param auth.usePasswordFiles Mount credentials as files instead of using an environment variable
    ##
    usePasswordFiles: false
    ## @param auth.customPasswordFiles Use custom password files when `auth.usePasswordFiles` is set to `true`. Define path for keys `root` and `user`, also define `replicator` if `architecture` is set to `replication`
    ## Example:
    ## customPasswordFiles:
    ##   root: /vault/secrets/mysql-root
    ##   user: /vault/secrets/mysql-user
    ##   replicator: /vault/secrets/mysql-replicator
    ##
    customPasswordFiles: {}
    ## @param auth.defaultAuthenticationPlugin Sets the default authentication plugin, by default it will use `mysql_native_password`
    ## NOTE: `mysql_native_password` will be deprecated in future mysql version and it is used here for compatibility with previous version. If you want to use the new default authentication method set it to `caching_sha2_password`.
    ##
    defaultAuthenticationPlugin: ""
  ## @param initdbScripts Dictionary of initdb scripts
  ## Specify dictionary of scripts to be run at first boot
  ## Example:
  ## initdbScripts:
  ##   my_init_script.sh: |
  ##      #!/bin/bash
  ##      echo "Do something."
  ##
  initdbScripts: {}
  ## @param initdbScriptsConfigMap ConfigMap with the initdb scripts (Note: Overrides `initdbScripts`)
  ##
  initdbScriptsConfigMap: ""
  ## @param startdbScripts Dictionary of startdb scripts
  ## Specify dictionary of scripts to be run every time the container is started
  ## Example:
  ## startdbScripts:
  ##   my_start_script.sh: |
  ##      #!/bin/bash
  ##      echo "Do something."
  ##
  startdbScripts: {}
  ## @param startdbScriptsConfigMap ConfigMap with the startdb scripts (Note: Overrides `startdbScripts`)
  ##
  startdbScriptsConfigMap: ""

  ## @section MySQL Primary parameters
  ##

  primary:
    ## @param primary.name Name of the primary database (eg primary, master, leader, ...)
    ##
    name: primary
    ## @param primary.command Override default container command on MySQL Primary container(s) (useful when using custom images)
    ##
    command: []
    ## @param primary.args Override default container args on MySQL Primary container(s) (useful when using custom images)
    ##
    args: []
    ## @param primary.lifecycleHooks for the MySQL Primary container(s) to automate configuration before or after startup
    ##
    lifecycleHooks: {}
    ## @param primary.hostAliases Deployment pod host aliases
    ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
    ##
    hostAliases: []
    ## @param primary.configuration [string] Configure MySQL Primary with a custom my.cnf file
    ## ref: https://mysql.com/kb/en/mysql/configuring-mysql-with-mycnf/#example-of-configuration-file
    ##
    configuration: |-
      [mysqld]
      default_authentication_plugin={{- .Values.auth.defaultAuthenticationPlugin | default "mysql_native_password" }}
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mysql
      plugin_dir=/opt/bitnami/mysql/lib/plugin
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      datadir=/bitnami/mysql/data
      tmpdir=/opt/bitnami/mysql/tmp
      max_allowed_packet=16M
      bind-address=*
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
      log-error=/opt/bitnami/mysql/logs/mysqld.log
      character-set-server=UTF8
      slow_query_log=0
      long_query_time=10.0

      [client]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      default-character-set=UTF8
      plugin_dir=/opt/bitnami/mysql/lib/plugin

      [manager]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    ## @param primary.existingConfigmap Name of existing ConfigMap with MySQL Primary configuration.
    ## NOTE: When it's set the 'configuration' parameter is ignored
    ##
    existingConfigmap: ""
    ## @param primary.updateStrategy.type Update strategy type for the MySQL primary statefulset
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
    ##
    updateStrategy:
      type: RollingUpdate
    ## @param primary.podAnnotations Additional pod annotations for MySQL primary pods
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    ##
    podAnnotations: {}
    ## @param primary.podAffinityPreset MySQL primary pod affinity preset. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
    ##
    podAffinityPreset: ""
    ## @param primary.podAntiAffinityPreset MySQL primary pod anti-affinity preset. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
    ##
    podAntiAffinityPreset: soft
    ## MySQL Primary node affinity preset
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
    ##
    nodeAffinityPreset:
      ## @param primary.nodeAffinityPreset.type MySQL primary node affinity preset type. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
      ##
      type: ""
      ## @param primary.nodeAffinityPreset.key MySQL primary node label key to match Ignored if `primary.affinity` is set.
      ## E.g.
      ## key: "kubernetes.io/e2e-az-name"
      ##
      key: ""
      ## @param primary.nodeAffinityPreset.values MySQL primary node label values to match. Ignored if `primary.affinity` is set.
      ## E.g.
      ## values:
      ##   - e2e-az1
      ##   - e2e-az2
      ##
      values: []
    ## @param primary.affinity Affinity for MySQL primary pods assignment
    ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
    ##
    affinity: {}
    ## @param primary.nodeSelector Node labels for MySQL primary pods assignment
    ## ref: https://kubernetes.io/docs/user-guide/node-selection/
    ##
    nodeSelector: {}
    ## @param primary.tolerations Tolerations for MySQL primary pods assignment
    ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    ##
    tolerations: []
    ## @param primary.priorityClassName MySQL primary pods' priorityClassName
    ##
    priorityClassName: ""
    ## @param primary.runtimeClassName MySQL primary pods' runtimeClassName
    ##
    runtimeClassName: ""
    ## @param primary.schedulerName Name of the k8s scheduler (other than default)
    ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
    ##
    schedulerName: ""
    ## @param primary.terminationGracePeriodSeconds In seconds, time the given to the MySQL primary pod needs to terminate gracefully
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
    ##
    terminationGracePeriodSeconds: ""
    ## @param primary.topologySpreadConstraints Topology Spread Constraints for pod assignment
    ## https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
    ## The value is evaluated as a template
    ##
    topologySpreadConstraints: []
    ## @param primary.podManagementPolicy podManagementPolicy to manage scaling operation of MySQL primary pods
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies
    ##
    podManagementPolicy: ""
    ## MySQL primary Pod security context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    ## @param primary.podSecurityContext.enabled Enable security context for MySQL primary pods
    ## @param primary.podSecurityContext.fsGroup Group ID for the mounted volumes' filesystem
    ##
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    ## MySQL primary container security context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
    ## @param primary.containerSecurityContext.enabled MySQL primary container securityContext
    ## @param primary.containerSecurityContext.runAsUser User ID for the MySQL primary container
    ## @param primary.containerSecurityContext.runAsNonRoot Set MySQL primary container's Security Context runAsNonRoot
    ## @param primary.containerSecurityContext.allowPrivilegeEscalation Set container's privilege escalation
    ## @param primary.containerSecurityContext.capabilities.drop Set container's Security Context runAsNonRoot
    ## @param primary.containerSecurityContext.seccompProfile.type Set Client container's Security Context seccomp profile
    ##
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: "RuntimeDefault"
    ## MySQL primary container's resource requests and limits
    ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
    ## We usually recommend not to specify default resources and to leave this as a conscious
    ## choice for the user. This also increases chances charts run on environments with little
    ## resources, such as Minikube. If you do want to specify resources, uncomment the following
    ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    ## @param primary.resources.limits The resources limits for MySQL primary containers
    ## @param primary.resources.requests The requested resources for MySQL primary containers
    ##
    resources:
      ## Example:
      ## limits:
      ##    cpu: 250m
      ##    memory: 256Mi
      ##
      limits: {}
      ## Examples:
      ## requests:
      ##    cpu: 250m
      ##    memory: 256Mi
      ##
      requests: {}
    ## Configure extra options for liveness probe
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
    ## @param primary.livenessProbe.enabled Enable livenessProbe
    ## @param primary.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
    ## @param primary.livenessProbe.periodSeconds Period seconds for livenessProbe
    ## @param primary.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
    ## @param primary.livenessProbe.failureThreshold Failure threshold for livenessProbe
    ## @param primary.livenessProbe.successThreshold Success threshold for livenessProbe
    ##
    livenessProbe:
      enabled: true
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 3
      successThreshold: 1
    ## Configure extra options for readiness probe
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
    ## @param primary.readinessProbe.enabled Enable readinessProbe
    ## @param primary.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
    ## @param primary.readinessProbe.periodSeconds Period seconds for readinessProbe
    ## @param primary.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
    ## @param primary.readinessProbe.failureThreshold Failure threshold for readinessProbe
    ## @param primary.readinessProbe.successThreshold Success threshold for readinessProbe
    ##
    readinessProbe:
      enabled: true
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 3
      successThreshold: 1
    ## Configure extra options for startupProbe probe
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
    ## @param primary.startupProbe.enabled Enable startupProbe
    ## @param primary.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
    ## @param primary.startupProbe.periodSeconds Period seconds for startupProbe
    ## @param primary.startupProbe.timeoutSeconds Timeout seconds for startupProbe
    ## @param primary.startupProbe.failureThreshold Failure threshold for startupProbe
    ## @param primary.startupProbe.successThreshold Success threshold for startupProbe
    ##
    startupProbe:
      enabled: true
      initialDelaySeconds: 15
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 10
      successThreshold: 1
    ## @param primary.customLivenessProbe Override default liveness probe for MySQL primary containers
    ##
    customLivenessProbe: {}
    ## @param primary.customReadinessProbe Override default readiness probe for MySQL primary containers
    ##
    customReadinessProbe: {}
    ## @param primary.customStartupProbe Override default startup probe for MySQL primary containers
    ##
    customStartupProbe: {}
    ## @param primary.extraFlags MySQL primary additional command line flags
    ## Can be used to specify command line flags, for example:
    ## E.g.
    ## extraFlags: "--max-connect-errors=1000 --max_connections=155"
    ##
    extraFlags: ""
    ## @param primary.extraEnvVars Extra environment variables to be set on MySQL primary containers
    ## E.g.
    ## extraEnvVars:
    ##  - name: TZ
    ##    value: "Europe/Paris"
    ##
    extraEnvVars: []
    ## @param primary.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for MySQL primary containers
    ##
    extraEnvVarsCM: ""
    ## @param primary.extraEnvVarsSecret Name of existing Secret containing extra env vars for MySQL primary containers
    ##
    extraEnvVarsSecret: ""
    ## @param primary.extraPodSpec Optionally specify extra PodSpec for the MySQL Primary pod(s)
    ##
    extraPodSpec: {}
    ## @param primary.extraPorts Extra ports to expose
    ##
    extraPorts: []
    ## Enable persistence using Persistent Volume Claims
    ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    persistence:
      ## @param primary.persistence.enabled Enable persistence on MySQL primary replicas using a `PersistentVolumeClaim`. If false, use emptyDir
      ##
      enabled: true
      ## @param primary.persistence.existingClaim Name of an existing `PersistentVolumeClaim` for MySQL primary replicas
      ## NOTE: When it's set the rest of persistence parameters are ignored
      ##
      existingClaim: ""
      ## @param primary.persistence.subPath The name of a volume's sub path to mount for persistence
      ##
      subPath: ""
      ## @param primary.persistence.storageClass MySQL primary persistent volume storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      storageClass: ""
      ## @param primary.persistence.annotations MySQL primary persistent volume claim annotations
      ##
      annotations: {}
      ## @param primary.persistence.accessModes MySQL primary persistent volume access Modes
      ##
      accessModes:
        - ReadWriteOnce
      ## @param primary.persistence.size MySQL primary persistent volume size
      ##
      size: 8Gi
      ## @param primary.persistence.selector Selector to match an existing Persistent Volume
      ## selector:
      ##   matchLabels:
      ##     app: my-app
      ##
      selector: {}
    ## Primary Persistent Volume Claim Retention Policy
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#persistentvolumeclaim-retention
    ##
    persistentVolumeClaimRetentionPolicy:
      ## @param primary.persistentVolumeClaimRetentionPolicy.enabled Enable Persistent volume retention policy for Primary StatefulSet
      ##
      enabled: false
      ## @param primary.persistentVolumeClaimRetentionPolicy.whenScaled Volume retention behavior when the replica count of the StatefulSet is reduced
      ##
      whenScaled: Retain
      ## @param primary.persistentVolumeClaimRetentionPolicy.whenDeleted Volume retention behavior that applies when the StatefulSet is deleted
      ##
      whenDeleted: Retain
    ## @param primary.extraVolumes Optionally specify extra list of additional volumes to the MySQL Primary pod(s)
    ##
    extraVolumes: []
    ## @param primary.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the MySQL Primary container(s)
    ##
    extraVolumeMounts: []
    ## @param primary.initContainers Add additional init containers for the MySQL Primary pod(s)
    ##
    initContainers: []
    ## @param primary.sidecars Add additional sidecar containers for the MySQL Primary pod(s)
    ##
    sidecars: []
    ## MySQL Primary Service parameters
    ##
    service:
      ## @param primary.service.type MySQL Primary K8s service type
      ##
      type: ClusterIP
      ## @param primary.service.ports.mysql MySQL Primary K8s service port
      ##
      ports:
        mysql: 3306
      ## @param primary.service.nodePorts.mysql MySQL Primary K8s service node port
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
      ##
      nodePorts:
        mysql: ""
      ## @param primary.service.clusterIP MySQL Primary K8s service clusterIP IP
      ## e.g:
      ## clusterIP: None
      ##
      clusterIP: ""
      ## @param primary.service.loadBalancerIP MySQL Primary loadBalancerIP if service type is `LoadBalancer`
      ## Set the LoadBalancer service type to internal only
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
      ##
      loadBalancerIP: ""
      ## @param primary.service.externalTrafficPolicy Enable client source IP preservation
      ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
      ##
      externalTrafficPolicy: Cluster
      ## @param primary.service.loadBalancerSourceRanges Addresses that are allowed when MySQL Primary service is LoadBalancer
      ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
      ## E.g.
      ## loadBalancerSourceRanges:
      ##   - 10.10.10.0/24
      ##
      loadBalancerSourceRanges: []
      ## @param primary.service.extraPorts Extra ports to expose (normally used with the `sidecar` value)
      ##
      extraPorts: []
      ## @param primary.service.annotations Additional custom annotations for MySQL primary service
      ##
      annotations: {}
      ## @param primary.service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
      ## If "ClientIP", consecutive client requests will be directed to the same Pod
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
      ##
      sessionAffinity: None
      ## @param primary.service.sessionAffinityConfig Additional settings for the sessionAffinity
      ## sessionAffinityConfig:
      ##   clientIP:
      ##     timeoutSeconds: 300
      ##
      sessionAffinityConfig: {}
      ## Headless service properties
      ##
      headless:
        ## @param primary.service.headless.annotations Additional custom annotations for headless MySQL primary service.
        ##
        annotations: {}

    ## MySQL primary Pod Disruption Budget configuration
    ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
    ##
    pdb:
      ## @param primary.pdb.create Enable/disable a Pod Disruption Budget creation for MySQL primary pods
      ##
      create: false
      ## @param primary.pdb.minAvailable Minimum number/percentage of MySQL primary pods that should remain scheduled
      ##
      minAvailable: 1
      ## @param primary.pdb.maxUnavailable Maximum number/percentage of MySQL primary pods that may be made unavailable
      ##
      maxUnavailable: ""
    ## @param primary.podLabels MySQL Primary pod label. If labels are same as commonLabels , this will take precedence
    ##
    podLabels: {}

  ## @section MySQL Secondary parameters
  ##

  secondary:
    ## @param secondary.name Name of the secondary database (eg secondary, slave, ...)
    ##
    name: secondary
    ## @param secondary.replicaCount Number of MySQL secondary replicas
    ##
    replicaCount: 1
    ## @param secondary.hostAliases Deployment pod host aliases
    ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
    ##
    hostAliases: []
    ## @param secondary.command Override default container command on MySQL Secondary container(s) (useful when using custom images)
    ##
    command: []
    ## @param secondary.args Override default container args on MySQL Secondary container(s) (useful when using custom images)
    ##
    args: []
    ## @param secondary.lifecycleHooks for the MySQL Secondary container(s) to automate configuration before or after startup
    ##
    lifecycleHooks: {}
    ## @param secondary.configuration [string] Configure MySQL Secondary with a custom my.cnf file
    ## ref: https://mysql.com/kb/en/mysql/configuring-mysql-with-mycnf/#example-of-configuration-file
    ##
    configuration: |-
      [mysqld]
      default_authentication_plugin=mysql_native_password
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mysql
      plugin_dir=/opt/bitnami/mysql/lib/plugin
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      datadir=/bitnami/mysql/data
      tmpdir=/opt/bitnami/mysql/tmp
      max_allowed_packet=16M
      bind-address=*
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
      log-error=/opt/bitnami/mysql/logs/mysqld.log
      character-set-server=UTF8
      slow_query_log=0
      long_query_time=10.0

      [client]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      default-character-set=UTF8
      plugin_dir=/opt/bitnami/mysql/lib/plugin

      [manager]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    ## @param secondary.existingConfigmap Name of existing ConfigMap with MySQL Secondary configuration.
    ## NOTE: When it's set the 'configuration' parameter is ignored
    ##
    existingConfigmap: ""
    ## @param secondary.updateStrategy.type Update strategy type for the MySQL secondary statefulset
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
    ##
    updateStrategy:
      type: RollingUpdate
    ## @param secondary.podAnnotations Additional pod annotations for MySQL secondary pods
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    ##
    podAnnotations: {}
    ## @param secondary.podAffinityPreset MySQL secondary pod affinity preset. Ignored if `secondary.affinity` is set. Allowed values: `soft` or `hard`
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
    ##
    podAffinityPreset: ""
    ## @param secondary.podAntiAffinityPreset MySQL secondary pod anti-affinity preset. Ignored if `secondary.affinity` is set. Allowed values: `soft` or `hard`
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
    ## Allowed values: soft, hard
    ##
    podAntiAffinityPreset: soft
    ## MySQL Secondary node affinity preset
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
    ##
    nodeAffinityPreset:
      ## @param secondary.nodeAffinityPreset.type MySQL secondary node affinity preset type. Ignored if `secondary.affinity` is set. Allowed values: `soft` or `hard`
      ##
      type: ""
      ## @param secondary.nodeAffinityPreset.key MySQL secondary node label key to match Ignored if `secondary.affinity` is set.
      ## E.g.
      ## key: "kubernetes.io/e2e-az-name"
      ##
      key: ""
      ## @param secondary.nodeAffinityPreset.values MySQL secondary node label values to match. Ignored if `secondary.affinity` is set.
      ## E.g.
      ## values:
      ##   - e2e-az1
      ##   - e2e-az2
      ##
      values: []
    ## @param secondary.affinity Affinity for MySQL secondary pods assignment
    ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
    ##
    affinity: {}
    ## @param secondary.nodeSelector Node labels for MySQL secondary pods assignment
    ## ref: https://kubernetes.io/docs/user-guide/node-selection/
    ##
    nodeSelector: {}
    ## @param secondary.tolerations Tolerations for MySQL secondary pods assignment
    ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    ##
    tolerations: []
    ## @param secondary.priorityClassName MySQL secondary pods' priorityClassName
    ##
    priorityClassName: ""
    ## @param secondary.runtimeClassName MySQL secondary pods' runtimeClassName
    ##
    runtimeClassName: ""
    ## @param secondary.schedulerName Name of the k8s scheduler (other than default)
    ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
    ##
    schedulerName: ""
    ## @param secondary.terminationGracePeriodSeconds In seconds, time the given to the MySQL secondary pod needs to terminate gracefully
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
    ##
    terminationGracePeriodSeconds: ""
    ## @param secondary.topologySpreadConstraints Topology Spread Constraints for pod assignment
    ## https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
    ## The value is evaluated as a template
    ##
    topologySpreadConstraints: []
    ## @param secondary.podManagementPolicy podManagementPolicy to manage scaling operation of MySQL secondary pods
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies
    ##
    podManagementPolicy: ""
    ## MySQL secondary Pod security context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    ## @param secondary.podSecurityContext.enabled Enable security context for MySQL secondary pods
    ## @param secondary.podSecurityContext.fsGroup Group ID for the mounted volumes' filesystem
    ##
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    ## MySQL secondary container security context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
    ## @param secondary.containerSecurityContext.enabled MySQL secondary container securityContext
    ## @param secondary.containerSecurityContext.runAsUser User ID for the MySQL secondary container
    ## @param secondary.containerSecurityContext.runAsNonRoot Set MySQL secondary container's Security Context runAsNonRoot
    ## @param secondary.containerSecurityContext.allowPrivilegeEscalation Set container's privilege escalation
    ## @param secondary.containerSecurityContext.capabilities.drop Set container's Security Context runAsNonRoot
    ## @param secondary.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
    ##
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: "RuntimeDefault"
    ## MySQL secondary container's resource requests and limits
    ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
    ## We usually recommend not to specify default resources and to leave this as a conscious
    ## choice for the user. This also increases chances charts run on environments with little
    ## resources, such as Minikube. If you do want to specify resources, uncomment the following
    ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    ## @param secondary.resources.limits The resources limits for MySQL secondary containers
    ## @param secondary.resources.requests The requested resources for MySQL secondary containers
    ##
    resources:
      ## Example:
      ## limits:
      ##    cpu: 250m
      ##    memory: 256Mi
      ##
      limits: {}
      ## Examples:
      ## requests:
      ##    cpu: 250m
      ##    memory: 256Mi
      ##
      requests: {}
    ## Configure extra options for liveness probe
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
    ## @param secondary.livenessProbe.enabled Enable livenessProbe
    ## @param secondary.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
    ## @param secondary.livenessProbe.periodSeconds Period seconds for livenessProbe
    ## @param secondary.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
    ## @param secondary.livenessProbe.failureThreshold Failure threshold for livenessProbe
    ## @param secondary.livenessProbe.successThreshold Success threshold for livenessProbe
    ##
    livenessProbe:
      enabled: true
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 3
      successThreshold: 1
    ## Configure extra options for readiness probe
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
    ## @param secondary.readinessProbe.enabled Enable readinessProbe
    ## @param secondary.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
    ## @param secondary.readinessProbe.periodSeconds Period seconds for readinessProbe
    ## @param secondary.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
    ## @param secondary.readinessProbe.failureThreshold Failure threshold for readinessProbe
    ## @param secondary.readinessProbe.successThreshold Success threshold for readinessProbe
    ##
    readinessProbe:
      enabled: true
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 3
      successThreshold: 1
    ## Configure extra options for startupProbe probe
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
    ## @param secondary.startupProbe.enabled Enable startupProbe
    ## @param secondary.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
    ## @param secondary.startupProbe.periodSeconds Period seconds for startupProbe
    ## @param secondary.startupProbe.timeoutSeconds Timeout seconds for startupProbe
    ## @param secondary.startupProbe.failureThreshold Failure threshold for startupProbe
    ## @param secondary.startupProbe.successThreshold Success threshold for startupProbe
    ##
    startupProbe:
      enabled: true
      initialDelaySeconds: 15
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 15
      successThreshold: 1
    ## @param secondary.customLivenessProbe Override default liveness probe for MySQL secondary containers
    ##
    customLivenessProbe: {}
    ## @param secondary.customReadinessProbe Override default readiness probe for MySQL secondary containers
    ##
    customReadinessProbe: {}
    ## @param secondary.customStartupProbe Override default startup probe for MySQL secondary containers
    ##
    customStartupProbe: {}
    ## @param secondary.extraFlags MySQL secondary additional command line flags
    ## Can be used to specify command line flags, for example:
    ## E.g.
    ## extraFlags: "--max-connect-errors=1000 --max_connections=155"
    ##
    extraFlags: ""
    ## @param secondary.extraEnvVars An array to add extra environment variables on MySQL secondary containers
    ## E.g.
    ## extraEnvVars:
    ##  - name: TZ
    ##    value: "Europe/Paris"
    ##
    extraEnvVars: []
    ## @param secondary.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for MySQL secondary containers
    ##
    extraEnvVarsCM: ""
    ## @param secondary.extraEnvVarsSecret Name of existing Secret containing extra env vars for MySQL secondary containers
    ##
    extraEnvVarsSecret: ""
    ## @param secondary.extraPodSpec Optionally specify extra PodSpec for the MySQL Secondary pod(s)
    ##
    extraPodSpec: {}
    ## @param secondary.extraPorts Extra ports to expose
    ##
    extraPorts: []
    ## Enable persistence using Persistent Volume Claims
    ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    persistence:
      ## @param secondary.persistence.enabled Enable persistence on MySQL secondary replicas using a `PersistentVolumeClaim`
      ##
      enabled: true
      ## @param secondary.persistence.existingClaim Name of an existing `PersistentVolumeClaim` for MySQL secondary replicas
      ## NOTE: When it's set the rest of persistence parameters are ignored
      ##
      existingClaim: ""
      ## @param secondary.persistence.subPath The name of a volume's sub path to mount for persistence
      ##
      subPath: ""
      ## @param secondary.persistence.storageClass MySQL secondary persistent volume storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      storageClass: ""
      ## @param secondary.persistence.annotations MySQL secondary persistent volume claim annotations
      ##
      annotations: {}
      ## @param secondary.persistence.accessModes MySQL secondary persistent volume access Modes
      ##
      accessModes:
        - ReadWriteOnce
      ## @param secondary.persistence.size MySQL secondary persistent volume size
      ##
      size: 8Gi
      ## @param secondary.persistence.selector Selector to match an existing Persistent Volume
      ## selector:
      ##   matchLabels:
      ##     app: my-app
      ##
      selector: {}
    ## Secondary Persistent Volume Claim Retention Policy
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#persistentvolumeclaim-retention
    ##
    persistentVolumeClaimRetentionPolicy:
      ## @param secondary.persistentVolumeClaimRetentionPolicy.enabled Enable Persistent volume retention policy for read only StatefulSet
      ##
      enabled: false
      ## @param secondary.persistentVolumeClaimRetentionPolicy.whenScaled Volume retention behavior when the replica count of the StatefulSet is reduced
      ##
      whenScaled: Retain
      ## @param secondary.persistentVolumeClaimRetentionPolicy.whenDeleted Volume retention behavior that applies when the StatefulSet is deleted
      ##
      whenDeleted: Retain
    ## @param secondary.extraVolumes Optionally specify extra list of additional volumes to the MySQL secondary pod(s)
    ##
    extraVolumes: []
    ## @param secondary.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the MySQL secondary container(s)
    ##
    extraVolumeMounts: []
    ## @param secondary.initContainers Add additional init containers for the MySQL secondary pod(s)
    ##
    initContainers: []
    ## @param secondary.sidecars Add additional sidecar containers for the MySQL secondary pod(s)
    ##
    sidecars: []
    ## MySQL Secondary Service parameters
    ##
    service:
      ## @param secondary.service.type MySQL secondary Kubernetes service type
      ##
      type: ClusterIP
      ## @param secondary.service.ports.mysql MySQL secondary Kubernetes service port
      ##
      ports:
        mysql: 3306
      ## @param secondary.service.nodePorts.mysql MySQL secondary Kubernetes service node port
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
      ##
      nodePorts:
        mysql: ""
      ## @param secondary.service.clusterIP MySQL secondary Kubernetes service clusterIP IP
      ## e.g:
      ## clusterIP: None
      ##
      clusterIP: ""
      ## @param secondary.service.loadBalancerIP MySQL secondary loadBalancerIP if service type is `LoadBalancer`
      ## Set the LoadBalancer service type to internal only
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
      ##
      loadBalancerIP: ""
      ## @param secondary.service.externalTrafficPolicy Enable client source IP preservation
      ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
      ##
      externalTrafficPolicy: Cluster
      ## @param secondary.service.loadBalancerSourceRanges Addresses that are allowed when MySQL secondary service is LoadBalancer
      ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
      ## E.g.
      ## loadBalancerSourceRanges:
      ##   - 10.10.10.0/24
      ##
      loadBalancerSourceRanges: []
      ## @param secondary.service.extraPorts Extra ports to expose (normally used with the `sidecar` value)
      ##
      extraPorts: []
      ## @param secondary.service.annotations Additional custom annotations for MySQL secondary service
      ##
      annotations: {}
      ## @param secondary.service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
      ## If "ClientIP", consecutive client requests will be directed to the same Pod
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
      ##
      sessionAffinity: None
      ## @param secondary.service.sessionAffinityConfig Additional settings for the sessionAffinity
      ## sessionAffinityConfig:
      ##   clientIP:
      ##     timeoutSeconds: 300
      ##
      sessionAffinityConfig: {}
      ## Headless service properties
      ##
      headless:
        ## @param secondary.service.headless.annotations Additional custom annotations for headless MySQL secondary service.
        ##
        annotations: {}

    ## MySQL secondary Pod Disruption Budget configuration
    ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
    ##
    pdb:
      ## @param secondary.pdb.create Enable/disable a Pod Disruption Budget creation for MySQL secondary pods
      ##
      create: false
      ## @param secondary.pdb.minAvailable Minimum number/percentage of MySQL secondary pods that should remain scheduled
      ##
      minAvailable: 1
      ## @param secondary.pdb.maxUnavailable Maximum number/percentage of MySQL secondary pods that may be made unavailable
      ##
      maxUnavailable: ""
    ## @param secondary.podLabels Additional pod labels for MySQL secondary pods
    ##
    podLabels: {}

  ## @section RBAC parameters
  ##

  ## MySQL pods ServiceAccount
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
  ##
  serviceAccount:
    ## @param serviceAccount.create Enable the creation of a ServiceAccount for MySQL pods
    ##
    create: true
    ## @param serviceAccount.name Name of the created ServiceAccount
    ## If not set and create is true, a name is generated using the mysql.fullname template
    ##
    name: ""
    ## @param serviceAccount.annotations Annotations for MySQL Service Account
    ##
    annotations: {}
    ## @param serviceAccount.automountServiceAccountToken Automount service account token for the server service account
    ##
    automountServiceAccountToken: true

  ## Role Based Access
  ## ref: https://kubernetes.io/docs/admin/authorization/rbac/
  ##
  rbac:
    ## @param rbac.create Whether to create & use RBAC resources or not
    ##
    create: false
    ## @param rbac.rules Custom RBAC rules to set
    ## e.g:
    ## rules:
    ##   - apiGroups:
    ##       - ""
    ##     resources:
    ##       - pods
    ##     verbs:
    ##       - get
    ##       - list
    ##
    rules: []

  ## @section Network Policy
  ##

  ## MySQL Nework Policy configuration
  ##
  networkPolicy:
    ## @param networkPolicy.enabled Enable creation of NetworkPolicy resources
    ##
    enabled: false
    ## @param networkPolicy.allowExternal The Policy model to apply.
    ## When set to false, only pods with the correct
    ## client label will have network access to the port MySQL is listening
    ## on. When true, MySQL will accept connections from any source
    ## (with the correct destination port).
    ##
    allowExternal: true
    ## @param networkPolicy.explicitNamespacesSelector A Kubernetes LabelSelector to explicitly select namespaces from which ingress traffic could be allowed to MySQL
    ## If explicitNamespacesSelector is missing or set to {}, only client Pods that are in the networkPolicy's namespace
    ## and that match other criteria, the ones that have the good label, can reach the DB.
    ## But sometimes, we want the DB to be accessible to clients from other namespaces, in this case, we can use this
    ## LabelSelector to select these namespaces, note that the networkPolicy's namespace should also be explicitly added.
    ##
    ## Example:
    ## explicitNamespacesSelector:
    ##   matchLabels:
    ##     role: frontend
    ##   matchExpressions:
    ##    - {key: role, operator: In, values: [frontend]}
    ##
    explicitNamespacesSelector: {}

  ## @section Volume Permissions parameters
  ##

  ## Init containers parameters:
  ## volumePermissions: Change the owner and group of the persistent volume mountpoint to runAsUser:fsGroup values from the securityContext section.
  ##
  volumePermissions:
    ## @param volumePermissions.enabled Enable init container that changes the owner and group of the persistent volume(s) mountpoint to `runAsUser:fsGroup`
    ##
    enabled: false
    ## @param volumePermissions.image.registry [default: REGISTRY_NAME] Init container volume-permissions image registry
    ## @param volumePermissions.image.repository [default: REPOSITORY_NAME/os-shell] Init container volume-permissions image repository
    ## @skip volumePermissions.image.tag Init container volume-permissions image tag (immutable tags are recommended)
    ## @param volumePermissions.image.digest Init container volume-permissions image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
    ## @param volumePermissions.image.pullPolicy Init container volume-permissions image pull policy
    ## @param volumePermissions.image.pullSecrets Specify docker-registry secret names as an array
    ##
    image:
      registry: docker.io
      repository: bitnami/os-shell
      tag: 8.0.35-debian-11-r2
      digest: ""
      pullPolicy: IfNotPresent
      ## Optionally specify an array of imagePullSecrets.
      ## Secrets must be manually created in the namespace.
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ## e.g:
      ## pullSecrets:
      ##   - myRegistryKeySecretName
      ##
      pullSecrets: []
    ## @param volumePermissions.resources Init container volume-permissions resources
    ##
    resources: {}

  ## @section Metrics parameters
  ##

  ## Mysqld Prometheus exporter parameters
  ##
  metrics:
    ## @param metrics.enabled Start a side-car prometheus exporter
    ##
    enabled: false
    ## @param metrics.image.registry [default: REGISTRY_NAME] Exporter image registry
    ## @param metrics.image.repository [default: REPOSITORY_NAME/mysqld-exporter] Exporter image repository
    ## @skip metrics.image.tag Exporter image tag (immutable tags are recommended)
    ## @param metrics.image.digest Exporter image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
    ## @param metrics.image.pullPolicy Exporter image pull policy
    ## @param metrics.image.pullSecrets Specify docker-registry secret names as an array
    ##
    image:
      registry: docker.io
      repository: bitnami/mysqld-exporter
      tag: 0.15.1-debian-11-r0
      digest: ""
      pullPolicy: IfNotPresent
      ## Optionally specify an array of imagePullSecrets.
      ## Secrets must be manually created in the namespace.
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ## e.g:
      ## pullSecrets:
      ##   - myRegistryKeySecretName
      ##
      pullSecrets: []
    ## MySQL metrics container security context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
    ## @param metrics.containerSecurityContext.enabled MySQL metrics container securityContext
    ## @param metrics.containerSecurityContext.runAsUser User ID for the MySQL metrics container
    ## @param metrics.containerSecurityContext.runAsNonRoot Set MySQL metrics container's Security Context runAsNonRoot
    ##
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
      runAsNonRoot: true
    ## MySQL Prometheus exporter service parameters
    ## Mysqld Prometheus exporter liveness and readiness probes
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
    ## @param metrics.service.type Kubernetes service type for MySQL Prometheus Exporter
    ## @param metrics.service.clusterIP Kubernetes service clusterIP for MySQL Prometheus Exporter
    ## @param metrics.service.port MySQL Prometheus Exporter service port
    ## @param metrics.service.annotations [object] Prometheus exporter service annotations
    ##
    service:
      type: ClusterIP
      port: 9104
      clusterIP: ""
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.metrics.service.port }}"
    ## @param metrics.extraArgs.primary Extra args to be passed to mysqld_exporter on Primary pods
    ## @param metrics.extraArgs.secondary Extra args to be passed to mysqld_exporter on Secondary pods
    ## ref: https://github.com/prometheus/mysqld_exporter/
    ## E.g.
    ## - --collect.auto_increment.columns
    ## - --collect.binlog_size
    ## - --collect.engine_innodb_status
    ## - --collect.engine_tokudb_status
    ## - --collect.global_status
    ## - --collect.global_variables
    ## - --collect.info_schema.clientstats
    ## - --collect.info_schema.innodb_metrics
    ## - --collect.info_schema.innodb_tablespaces
    ## - --collect.info_schema.innodb_cmp
    ## - --collect.info_schema.innodb_cmpmem
    ## - --collect.info_schema.processlist
    ## - --collect.info_schema.processlist.min_time
    ## - --collect.info_schema.query_response_time
    ## - --collect.info_schema.tables
    ## - --collect.info_schema.tables.databases
    ## - --collect.info_schema.tablestats
    ## - --collect.info_schema.userstats
    ## - --collect.perf_schema.eventsstatements
    ## - --collect.perf_schema.eventsstatements.digest_text_limit
    ## - --collect.perf_schema.eventsstatements.limit
    ## - --collect.perf_schema.eventsstatements.timelimit
    ## - --collect.perf_schema.eventswaits
    ## - --collect.perf_schema.file_events
    ## - --collect.perf_schema.file_instances
    ## - --collect.perf_schema.indexiowaits
    ## - --collect.perf_schema.tableiowaits
    ## - --collect.perf_schema.tablelocks
    ## - --collect.perf_schema.replication_group_member_stats
    ## - --collect.slave_status
    ## - --collect.slave_hosts
    ## - --collect.heartbeat
    ## - --collect.heartbeat.database
    ## - --collect.heartbeat.table
    ##
    extraArgs:
      primary: []
      secondary: []
    ## Mysqld Prometheus exporter resource requests and limits
    ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
    ## We usually recommend not to specify default resources and to leave this as a conscious
    ## choice for the user. This also increases chances charts run on environments with little
    ## resources, such as Minikube. If you do want to specify resources, uncomment the following
    ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    ## @param metrics.resources.limits The resources limits for MySQL prometheus exporter containers
    ## @param metrics.resources.requests The requested resources for MySQL prometheus exporter containers
    ##
    resources:
      ## Example:
      ## limits:
      ##    cpu: 100m
      ##    memory: 256Mi
      ##
      limits: {}
      ## Examples:
      ## requests:
      ##    cpu: 100m
      ##    memory: 256Mi
      ##
      requests: {}
    ## Mysqld Prometheus exporter liveness probe
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
    ## @param metrics.livenessProbe.enabled Enable livenessProbe
    ## @param metrics.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
    ## @param metrics.livenessProbe.periodSeconds Period seconds for livenessProbe
    ## @param metrics.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
    ## @param metrics.livenessProbe.failureThreshold Failure threshold for livenessProbe
    ## @param metrics.livenessProbe.successThreshold Success threshold for livenessProbe
    ##
    livenessProbe:
      enabled: true
      initialDelaySeconds: 120
      periodSeconds: 10
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 3
    ## Mysqld Prometheus exporter readiness probe
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
    ## @param metrics.readinessProbe.enabled Enable readinessProbe
    ## @param metrics.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
    ## @param metrics.readinessProbe.periodSeconds Period seconds for readinessProbe
    ## @param metrics.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
    ## @param metrics.readinessProbe.failureThreshold Failure threshold for readinessProbe
    ## @param metrics.readinessProbe.successThreshold Success threshold for readinessProbe
    ##
    readinessProbe:
      enabled: true
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 3
    ## Prometheus Service Monitor
    ## ref: https://github.com/coreos/prometheus-operator
    ##
    serviceMonitor:
      ## @param metrics.serviceMonitor.enabled Create ServiceMonitor Resource for scraping metrics using PrometheusOperator
      ##
      enabled: false
      ## @param metrics.serviceMonitor.namespace Specify the namespace in which the serviceMonitor resource will be created
      ##
      namespace: ""
      ## @param metrics.serviceMonitor.jobLabel The name of the label on the target service to use as the job name in prometheus.
      ##
      jobLabel: ""
      ## @param metrics.serviceMonitor.interval Specify the interval at which metrics should be scraped
      ##
      interval: 30s
      ## @param metrics.serviceMonitor.scrapeTimeout Specify the timeout after which the scrape is ended
      ## e.g:
      ## scrapeTimeout: 30s
      ##
      scrapeTimeout: ""
      ## @param metrics.serviceMonitor.relabelings RelabelConfigs to apply to samples before scraping
      ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#relabelconfig
      ##
      relabelings: []
      ## @param metrics.serviceMonitor.metricRelabelings MetricRelabelConfigs to apply to samples before ingestion
      ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#relabelconfig
      ##
      metricRelabelings: []
      ## @param metrics.serviceMonitor.selector ServiceMonitor selector labels
      ## ref: https://github.com/bitnami/charts/tree/main/bitnami/prometheus-operator#prometheus-configuration
      ##
      ## selector:
      ##   prometheus: my-prometheus
      ##
      selector: {}
      ## @param metrics.serviceMonitor.honorLabels Specify honorLabels parameter to add the scrape endpoint
      ##
      honorLabels: false
      ## @param metrics.serviceMonitor.labels Used to pass Labels that are used by the Prometheus installed in your cluster to select Service Monitors to work with
      ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
      ##
      labels: {}
      ## @param metrics.serviceMonitor.annotations ServiceMonitor annotations
      ##
      annotations: {}

    ## Prometheus Operator prometheusRule configuration
    ##
    prometheusRule:
      ## @param metrics.prometheusRule.enabled Creates a Prometheus Operator prometheusRule (also requires `metrics.enabled` to be `true` and `metrics.prometheusRule.rules`)
      ##
      enabled: false
      ## @param metrics.prometheusRule.namespace Namespace for the prometheusRule Resource (defaults to the Release Namespace)
      ##
      namespace: ""
      ## @param metrics.prometheusRule.additionalLabels Additional labels that can be used so prometheusRule will be discovered by Prometheus
      ##
      additionalLabels: {}
      ## @param metrics.prometheusRule.rules Prometheus Rule definitions
      ##  - alert: Mysql-Down
      ##    expr: absent(up{job="mysql"} == 1)
      ##    for: 5m
      ##    labels:
      ##      severity: warning
      ##      service: mariadb
      ##    annotations:
      ##      message: 'MariaDB instance {{`{{`}} $labels.instance {{`}}`}}  is down'
      ##      summary: MariaDB instance is down
      ##
      rules: []